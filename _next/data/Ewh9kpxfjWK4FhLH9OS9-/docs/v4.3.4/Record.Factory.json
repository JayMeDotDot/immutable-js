{"pageProps":{"versions":["v4.3.4","v3.8.2","latest@main"],"version":"v4.3.4","def":{"qualifiedName":"Record.Factory","doc":{"synopsis":"<p>A Record.Factory is created by the <code><a href=\"/docs/v4.3.4/Record\">Record()</a></code> function. Record instances\nare created by passing it some of the accepted values for that Record\ntype:</p>\n","description":"<!-- runkit:activate\n     { \"preamble\": \"const { Record } = require('immutable')\" }\n-->\n<code class=\"codeBlock\"><span class=\"token comment\" spellcheck=\"true\">// makePerson is a Record Factory function\n</span><span class=\"token keyword\" >const</span> makePerson <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Record</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token primitive\" >null</span><span class=\"token punctuation\" >,</span> favoriteColor<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'unknown'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// alan is a Record instance\n</span><span class=\"token keyword\" >const</span> alan <span class=\"token operator\" >=</span> makePerson<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Alan'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22const%20%7B%20Record%20%7D%20%3D%20require%28%27immutable%27%29%22%7D\" onClick=\"runIt(this,'v4.3.4')\">run it</a></code><p>Note that Record Factories return <code><span class=\"token qualifier\" >Record</span><span class=\"token operator\" >&lt;</span>TProps<span class=\"token operator\" >></span> <span class=\"token operator\" >&amp;</span> <span class=\"token qualifier\" >Readonly</span><span class=\"token operator\" >&lt;</span>TProps<span class=\"token operator\" >></span></code>,\nthis allows use of both the Record instance API, and direct property\naccess on the resulting instances:</p>\n<!-- runkit:activate\n     { \"preamble\": \"const { Record } = require('immutable');const makePerson = Record({ name: null, favoriteColor: 'unknown' });const alan = makePerson({ name: 'Alan' });\" }\n-->\n<code class=\"codeBlock\"><span class=\"token comment\" spellcheck=\"true\">// Use the Record API\n</span>console<span class=\"token punctuation\" >.</span>log<span class=\"token punctuation\" >(</span><span class=\"token string\" >'Record API: '</span> <span class=\"token operator\" >+</span> alan<span class=\"token punctuation\" >.</span><span class=\"token keyword\" >get</span><span class=\"token punctuation\" >(</span><span class=\"token string\" >'name'</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >)</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Or direct property access (Readonly)\n</span>console<span class=\"token punctuation\" >.</span>log<span class=\"token punctuation\" >(</span><span class=\"token string\" >'property access: '</span> <span class=\"token operator\" >+</span> alan<span class=\"token punctuation\" >.</span>name<span class=\"token punctuation\" >)</span><a class=\"try-it\" data-options=\"%7B%22preamble%22%3A%22const%20%7B%20Record%20%7D%20%3D%20require%28%27immutable%27%29%3Bconst%20makePerson%20%3D%20Record%28%7B%20name%3A%20null%2C%20favoriteColor%3A%20%27unknown%27%20%7D%29%3Bconst%20alan%20%3D%20makePerson%28%7B%20name%3A%20%27Alan%27%20%7D%29%3B%22%7D\" onClick=\"runIt(this,'v4.3.4')\">run it</a></code><p><strong>Flow Typing Records:</strong></p>\n<p>Use the <code><span class=\"token qualifier\" >Record</span><span class=\"token qualifier\" >Factory</span><span class=\"token operator\" >&lt;</span>TProps<span class=\"token operator\" >></span></code> Flow type to get high quality type checking of\nRecords:</p>\n<code class=\"codeBlock\"><span class=\"token keyword\" >import</span> type <span class=\"token punctuation\" >{</span> <span class=\"token qualifier\" >Record</span><span class=\"token qualifier\" >Factory</span><span class=\"token punctuation\" >,</span> <span class=\"token qualifier\" >Record</span><span class=\"token qualifier\" >Of</span> <span class=\"token punctuation\" >}</span> from <span class=\"token string\" >'immutable'</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Use RecordFactory&lt;TProps> for defining new Record factory functions.\n</span>type <span class=\"token qualifier\" >Person</span><span class=\"token qualifier\" >Props</span> <span class=\"token operator\" >=</span> <span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token operator\" >?</span>string<span class=\"token punctuation\" >,</span> favoriteColor<span class=\"token punctuation\" >:</span> string <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> makePerson<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Record</span><span class=\"token qualifier\" >Factory</span><span class=\"token operator\" >&lt;</span><span class=\"token qualifier\" >Person</span><span class=\"token qualifier\" >Props</span><span class=\"token operator\" >></span> <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Record</span><span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token primitive\" >null</span><span class=\"token punctuation\" >,</span> favoriteColor<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'unknown'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span>\n\n<span class=\"token comment\" spellcheck=\"true\">// Use RecordOf&lt;T> for defining new instances of that Record.\n</span>type <span class=\"token qualifier\" >Person</span> <span class=\"token operator\" >=</span> <span class=\"token qualifier\" >Record</span><span class=\"token qualifier\" >Of</span><span class=\"token operator\" >&lt;</span><span class=\"token qualifier\" >Person</span><span class=\"token qualifier\" >Props</span><span class=\"token operator\" >></span><span class=\"token punctuation\" >;</span>\n<span class=\"token keyword\" >const</span> alan<span class=\"token punctuation\" >:</span> <span class=\"token qualifier\" >Person</span> <span class=\"token operator\" >=</span> makePerson<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >{</span> name<span class=\"token punctuation\" >:</span> <span class=\"token string\" >'Alan'</span> <span class=\"token punctuation\" >}</span><span class=\"token punctuation\" >)</span><span class=\"token punctuation\" >;</span></code>","notes":[]},"interface":{"members":{"displayName":{"name":"displayName","label":"displayName","id":"displayName","line":2625,"doc":{"synopsis":"<p>The name provided to <code><span class=\"token qualifier\" >Record</span><span class=\"token punctuation\" >(</span>values<span class=\"token punctuation\" >,</span> name<span class=\"token punctuation\" >)</span></code> can be accessed with\n<code><a href=\"/docs/v4.3.4/Record.Factory#displayName\">displayName</a></code>.</p>\n","description":"","notes":[]},"type":{"k":7},"url":"/docs/v4.3.4/Record.Factory#displayName"}},"line":2614,"typeParams":["TProps"]},"call":{"name":"Record.Factory","label":"Record.Factory()","id":"Record.Factory()","signatures":[{"line":2628,"typeParams":["TProps"],"params":[{"name":"values","type":{"k":13,"types":[{"k":12,"name":"Partial","args":[{"k":11,"param":"TProps"}]},{"k":12,"name":"Iterable","args":[{"k":15,"types":[{"k":7},{"k":2}]}]}]},"optional":true}],"type":{"k":14,"types":[{"k":12,"name":"Record","args":[{"k":11,"param":"TProps"}]},{"k":12,"name":"Readonly","args":[{"k":11,"param":"TProps"}]}]}}],"url":"/docs/v4.3.4/Record.Factory#Record.Factory()"},"label":"Record.Factory","url":"/docs/v4.3.4/Record.Factory"},"sidebarLinks":[{"label":"List","url":"/docs/v4.3.4/List"},{"label":"Map","url":"/docs/v4.3.4/Map"},{"label":"OrderedMap","url":"/docs/v4.3.4/OrderedMap"},{"label":"Set","url":"/docs/v4.3.4/Set"},{"label":"OrderedSet","url":"/docs/v4.3.4/OrderedSet"},{"label":"Stack","url":"/docs/v4.3.4/Stack"},{"label":"Range()","url":"/docs/v4.3.4/Range()"},{"label":"Repeat()","url":"/docs/v4.3.4/Repeat()"},{"label":"Record","url":"/docs/v4.3.4/Record"},{"label":"Record.Factory","url":"/docs/v4.3.4/Record.Factory"},{"label":"Seq","url":"/docs/v4.3.4/Seq"},{"label":"Seq.Keyed","url":"/docs/v4.3.4/Seq.Keyed"},{"label":"Seq.Indexed","url":"/docs/v4.3.4/Seq.Indexed"},{"label":"Seq.Set","url":"/docs/v4.3.4/Seq.Set"},{"label":"Collection","url":"/docs/v4.3.4/Collection"},{"label":"Collection.Keyed","url":"/docs/v4.3.4/Collection.Keyed"},{"label":"Collection.Indexed","url":"/docs/v4.3.4/Collection.Indexed"},{"label":"Collection.Set","url":"/docs/v4.3.4/Collection.Set"},{"label":"ValueObject","url":"/docs/v4.3.4/ValueObject"},{"label":"fromJS()","url":"/docs/v4.3.4/fromJS()"},{"label":"is()","url":"/docs/v4.3.4/is()"},{"label":"hash()","url":"/docs/v4.3.4/hash()"},{"label":"isImmutable()","url":"/docs/v4.3.4/isImmutable()"},{"label":"isCollection()","url":"/docs/v4.3.4/isCollection()"},{"label":"isKeyed()","url":"/docs/v4.3.4/isKeyed()"},{"label":"isIndexed()","url":"/docs/v4.3.4/isIndexed()"},{"label":"isAssociative()","url":"/docs/v4.3.4/isAssociative()"},{"label":"isOrdered()","url":"/docs/v4.3.4/isOrdered()"},{"label":"isValueObject()","url":"/docs/v4.3.4/isValueObject()"},{"label":"isSeq()","url":"/docs/v4.3.4/isSeq()"},{"label":"isList()","url":"/docs/v4.3.4/isList()"},{"label":"isMap()","url":"/docs/v4.3.4/isMap()"},{"label":"isOrderedMap()","url":"/docs/v4.3.4/isOrderedMap()"},{"label":"isStack()","url":"/docs/v4.3.4/isStack()"},{"label":"isSet()","url":"/docs/v4.3.4/isSet()"},{"label":"isOrderedSet()","url":"/docs/v4.3.4/isOrderedSet()"},{"label":"isRecord()","url":"/docs/v4.3.4/isRecord()"},{"label":"get()","url":"/docs/v4.3.4/get()"},{"label":"has()","url":"/docs/v4.3.4/has()"},{"label":"remove()","url":"/docs/v4.3.4/remove()"},{"label":"set()","url":"/docs/v4.3.4/set()"},{"label":"update()","url":"/docs/v4.3.4/update()"},{"label":"getIn()","url":"/docs/v4.3.4/getIn()"},{"label":"hasIn()","url":"/docs/v4.3.4/hasIn()"},{"label":"removeIn()","url":"/docs/v4.3.4/removeIn()"},{"label":"setIn()","url":"/docs/v4.3.4/setIn()"},{"label":"updateIn()","url":"/docs/v4.3.4/updateIn()"},{"label":"merge()","url":"/docs/v4.3.4/merge()"},{"label":"mergeWith()","url":"/docs/v4.3.4/mergeWith()"},{"label":"mergeDeep()","url":"/docs/v4.3.4/mergeDeep()"},{"label":"mergeDeepWith()","url":"/docs/v4.3.4/mergeDeepWith()"}]},"__N_SSG":true}