2:I[4063,["555","static/chunks/555-438bbb9fc9eaf2f2.js","15","static/chunks/15-abe590a51c908ae0.js","609","static/chunks/app/docs/%5Bversion%5D/%5Btype%5D/page-4b98c53048a6dfc2.js"],"ImmutableConsole"]
3:I[914,["555","static/chunks/555-438bbb9fc9eaf2f2.js","15","static/chunks/15-abe590a51c908ae0.js","609","static/chunks/app/docs/%5Bversion%5D/%5Btype%5D/page-4b98c53048a6dfc2.js"],"HeaderLogoLink"]
4:I[914,["555","static/chunks/555-438bbb9fc9eaf2f2.js","15","static/chunks/15-abe590a51c908ae0.js","609","static/chunks/app/docs/%5Bversion%5D/%5Btype%5D/page-4b98c53048a6dfc2.js"],"HeaderLinks"]
5:I[6556,["555","static/chunks/555-438bbb9fc9eaf2f2.js","15","static/chunks/15-abe590a51c908ae0.js","609","static/chunks/app/docs/%5Bversion%5D/%5Btype%5D/page-4b98c53048a6dfc2.js"],"TypeDocumentation"]
7:I[103,[],""]
a:I[5885,[],""]
6:T199d,<!-- runkit:activate
     { "preamble": "const { Record } = require('immutable')" }
-->
<code class="codeBlock"><span class="token comment" spellcheck="true">// makePerson is a Record Factory function
</span><span class="token keyword" >const</span> makePerson <span class="token operator" >=</span> <span class="token qualifier" >Record</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token primitive" >null</span><span class="token punctuation" >,</span> favoriteColor<span class="token punctuation" >:</span> <span class="token string" >'unknown'</span> <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>

<span class="token comment" spellcheck="true">// alan is a Record instance
</span><span class="token keyword" >const</span> alan <span class="token operator" >=</span> makePerson<span class="token punctuation" >(</span><span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >'Alan'</span> <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span><a class="try-it" data-options="%7B%22preamble%22%3A%22const%20%7B%20Record%20%7D%20%3D%20require%28%27immutable%27%29%22%7D" onClick="runIt(this,'latest@main')">run it</a></code><p>Note that Record Factories return <code><span class="token qualifier" >Record</span><span class="token operator" >&lt;</span>TProps<span class="token operator" >></span> <span class="token operator" >&amp;</span> <span class="token qualifier" >Readonly</span><span class="token operator" >&lt;</span>TProps<span class="token operator" >></span></code>,
this allows use of both the Record instance API, and direct property
access on the resulting instances:</p>
<!-- runkit:activate
     { "preamble": "const { Record } = require('immutable');const makePerson = Record({ name: null, favoriteColor: 'unknown' });const alan = makePerson({ name: 'Alan' });" }
-->
<code class="codeBlock"><span class="token comment" spellcheck="true">// Use the Record API
</span>console<span class="token punctuation" >.</span>log<span class="token punctuation" >(</span><span class="token string" >'Record API: '</span> <span class="token operator" >+</span> alan<span class="token punctuation" >.</span><span class="token keyword" >get</span><span class="token punctuation" >(</span><span class="token string" >'name'</span><span class="token punctuation" >)</span><span class="token punctuation" >)</span>

<span class="token comment" spellcheck="true">// Or direct property access (Readonly)
</span>console<span class="token punctuation" >.</span>log<span class="token punctuation" >(</span><span class="token string" >'property access: '</span> <span class="token operator" >+</span> alan<span class="token punctuation" >.</span>name<span class="token punctuation" >)</span><a class="try-it" data-options="%7B%22preamble%22%3A%22const%20%7B%20Record%20%7D%20%3D%20require%28%27immutable%27%29%3Bconst%20makePerson%20%3D%20Record%28%7B%20name%3A%20null%2C%20favoriteColor%3A%20%27unknown%27%20%7D%29%3Bconst%20alan%20%3D%20makePerson%28%7B%20name%3A%20%27Alan%27%20%7D%29%3B%22%7D" onClick="runIt(this,'latest@main')">run it</a></code><p><strong>Flow Typing Records:</strong></p>
<p>Use the <code><span class="token qualifier" >Record</span><span class="token qualifier" >Factory</span><span class="token operator" >&lt;</span>TProps<span class="token operator" >></span></code> Flow type to get high quality type checking of
Records:</p>
<code class="codeBlock"><span class="token keyword" >import</span> type <span class="token punctuation" >{</span> <span class="token qualifier" >Record</span><span class="token qualifier" >Factory</span><span class="token punctuation" >,</span> <span class="token qualifier" >Record</span><span class="token qualifier" >Of</span> <span class="token punctuation" >}</span> from <span class="token string" >'immutable'</span><span class="token punctuation" >;</span>

<span class="token comment" spellcheck="true">// Use RecordFactory&lt;TProps> for defining new Record factory functions.
</span>type <span class="token qualifier" >Person</span><span class="token qualifier" >Props</span> <span class="token operator" >=</span> <span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token operator" >?</span>string<span class="token punctuation" >,</span> favoriteColor<span class="token punctuation" >:</span> string <span class="token punctuation" >}</span><span class="token punctuation" >;</span>
<span class="token keyword" >const</span> makePerson<span class="token punctuation" >:</span> <span class="token qualifier" >Record</span><span class="token qualifier" >Factory</span><span class="token operator" >&lt;</span><span class="token qualifier" >Person</span><span class="token qualifier" >Props</span><span class="token operator" >></span> <span class="token operator" >=</span> <span class="token qualifier" >Record</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token primitive" >null</span><span class="token punctuation" >,</span> favoriteColor<span class="token punctuation" >:</span> <span class="token string" >'unknown'</span> <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span>

<span class="token comment" spellcheck="true">// Use RecordOf&lt;T> for defining new instances of that Record.
</span>type <span class="token qualifier" >Person</span> <span class="token operator" >=</span> <span class="token qualifier" >Record</span><span class="token qualifier" >Of</span><span class="token operator" >&lt;</span><span class="token qualifier" >Person</span><span class="token qualifier" >Props</span><span class="token operator" >></span><span class="token punctuation" >;</span>
<span class="token keyword" >const</span> alan<span class="token punctuation" >:</span> <span class="token qualifier" >Person</span> <span class="token operator" >=</span> makePerson<span class="token punctuation" >(</span><span class="token punctuation" >{</span> name<span class="token punctuation" >:</span> <span class="token string" >'Alan'</span> <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span></code>8:["version","latest%40main","d"]
9:["type","Record.Factory","d"]
0:["2oYw7exh8cCn2BVUm1O4_",[[["",{"children":["docs",{"children":[["version","latest%40main","d"],{"children":[["type","Record.Factory","d"],{"children":["__PAGE__?{\"version\":\"latest@main\",\"type\":\"Record.Factory\"}",{}]}]}]}]},"$undefined","$undefined",true],["",{"children":["docs",{"children":[["version","latest%40main","d"],{"children":[["type","Record.Factory","d"],{"children":["__PAGE__",{},["$L1",["$","div",null,{"children":[["$","$L2",null,{"version":"latest@main"}],["$","div",null,{"className":"header","children":["$","div",null,{"className":"miniHeader","children":["$","div",null,{"className":"miniHeaderContents","children":[["$","$L3",null,{}],["$","$L4",null,{"versions":["v4.3.7","v3.8.2","latest@main"],"currentVersion":"latest@main"}]]}]}]}],["$","div",null,{"className":"pageBody","children":["$","div",null,{"className":"contents","children":["$","$L5",null,{"def":{"qualifiedName":"Record.Factory","doc":{"synopsis":"<p>A Record.Factory is created by the <code><a href=\"/docs/latest@main/Record\">Record()</a></code> function. Record instances\nare created by passing it some of the accepted values for that Record\ntype:</p>\n","description":"$6","notes":[]},"interface":{"members":{"displayName":{"name":"displayName","label":"displayName","id":"displayName","line":2629,"doc":{"synopsis":"<p>The name provided to <code><span class=\"token qualifier\" >Record</span><span class=\"token punctuation\" >(</span>values<span class=\"token punctuation\" >,</span> name<span class=\"token punctuation\" >)</span></code> can be accessed with\n<code><a href=\"/docs/latest@main/Record.Factory#displayName\">displayName</a></code>.</p>\n","description":"","notes":[]},"type":{"k":7},"url":"/docs/latest@main/Record.Factory#displayName"}},"line":2618,"typeParams":["TProps"]},"call":{"name":"Record.Factory","label":"Record.Factory()","id":"Record.Factory()","signatures":[{"line":2632,"typeParams":["TProps"],"params":[{"name":"values","type":{"k":13,"types":[{"k":12,"name":"Partial","args":[{"k":11,"param":"TProps"}]},{"k":12,"name":"Iterable","args":[{"k":15,"types":[{"k":7},{"k":2}]}]}]},"optional":true}],"type":{"k":14,"types":[{"k":12,"name":"Record","args":[{"k":11,"param":"TProps"}]},{"k":12,"name":"Readonly","args":[{"k":11,"param":"TProps"}]}]}}],"url":"/docs/latest@main/Record.Factory#Record.Factory()"},"label":"Record.Factory","url":"/docs/latest@main/Record.Factory"},"sidebarLinks":[{"label":"List","url":"/docs/latest@main/List"},{"label":"Map","url":"/docs/latest@main/Map"},{"label":"OrderedMap","url":"/docs/latest@main/OrderedMap"},{"label":"Set","url":"/docs/latest@main/Set"},{"label":"OrderedSet","url":"/docs/latest@main/OrderedSet"},{"label":"Stack","url":"/docs/latest@main/Stack"},{"label":"Range()","url":"/docs/latest@main/Range()"},{"label":"Repeat()","url":"/docs/latest@main/Repeat()"},{"label":"Record","url":"/docs/latest@main/Record"},{"label":"Record.Factory","url":"/docs/latest@main/Record.Factory"},{"label":"Seq","url":"/docs/latest@main/Seq"},{"label":"Seq.Keyed","url":"/docs/latest@main/Seq.Keyed"},{"label":"Seq.Indexed","url":"/docs/latest@main/Seq.Indexed"},{"label":"Seq.Set","url":"/docs/latest@main/Seq.Set"},{"label":"Collection","url":"/docs/latest@main/Collection"},{"label":"Collection.Keyed","url":"/docs/latest@main/Collection.Keyed"},{"label":"Collection.Indexed","url":"/docs/latest@main/Collection.Indexed"},{"label":"Collection.Set","url":"/docs/latest@main/Collection.Set"},{"label":"ValueObject","url":"/docs/latest@main/ValueObject"},{"label":"fromJS()","url":"/docs/latest@main/fromJS()"},{"label":"is()","url":"/docs/latest@main/is()"},{"label":"hash()","url":"/docs/latest@main/hash()"},{"label":"isImmutable()","url":"/docs/latest@main/isImmutable()"},{"label":"isCollection()","url":"/docs/latest@main/isCollection()"},{"label":"isKeyed()","url":"/docs/latest@main/isKeyed()"},{"label":"isIndexed()","url":"/docs/latest@main/isIndexed()"},{"label":"isAssociative()","url":"/docs/latest@main/isAssociative()"},{"label":"isOrdered()","url":"/docs/latest@main/isOrdered()"},{"label":"isValueObject()","url":"/docs/latest@main/isValueObject()"},{"label":"isSeq()","url":"/docs/latest@main/isSeq()"},{"label":"isList()","url":"/docs/latest@main/isList()"},{"label":"isMap()","url":"/docs/latest@main/isMap()"},{"label":"isOrderedMap()","url":"/docs/latest@main/isOrderedMap()"},{"label":"isStack()","url":"/docs/latest@main/isStack()"},{"label":"isSet()","url":"/docs/latest@main/isSet()"},{"label":"isOrderedSet()","url":"/docs/latest@main/isOrderedSet()"},{"label":"isRecord()","url":"/docs/latest@main/isRecord()"},{"label":"get()","url":"/docs/latest@main/get()"},{"label":"has()","url":"/docs/latest@main/has()"},{"label":"remove()","url":"/docs/latest@main/remove()"},{"label":"set()","url":"/docs/latest@main/set()"},{"label":"update()","url":"/docs/latest@main/update()"},{"label":"getIn()","url":"/docs/latest@main/getIn()"},{"label":"hasIn()","url":"/docs/latest@main/hasIn()"},{"label":"removeIn()","url":"/docs/latest@main/removeIn()"},{"label":"setIn()","url":"/docs/latest@main/setIn()"},{"label":"updateIn()","url":"/docs/latest@main/updateIn()"},{"label":"merge()","url":"/docs/latest@main/merge()"},{"label":"mergeWith()","url":"/docs/latest@main/mergeWith()"},{"label":"mergeDeep()","url":"/docs/latest@main/mergeDeep()"},{"label":"mergeDeepWith()","url":"/docs/latest@main/mergeDeepWith()"}]}]}]}]]}],null]]},["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children","$8","children","$9","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children","$8","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"en","children":["$","body",null,{"children":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f4479af2108893f8.css","precedence":"next","crossOrigin":""}]],"$Lb"]]]]
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Record.Factory — Immutable.js"}],["$","link","3",{"rel":"icon","href":"/favicon.png"}]]
1:null
