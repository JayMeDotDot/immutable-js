2:I[4063,["555","static/chunks/555-438bbb9fc9eaf2f2.js","15","static/chunks/15-abe590a51c908ae0.js","609","static/chunks/app/docs/%5Bversion%5D/%5Btype%5D/page-4b98c53048a6dfc2.js"],"ImmutableConsole"]
3:I[914,["555","static/chunks/555-438bbb9fc9eaf2f2.js","15","static/chunks/15-abe590a51c908ae0.js","609","static/chunks/app/docs/%5Bversion%5D/%5Btype%5D/page-4b98c53048a6dfc2.js"],"HeaderLogoLink"]
4:I[914,["555","static/chunks/555-438bbb9fc9eaf2f2.js","15","static/chunks/15-abe590a51c908ae0.js","609","static/chunks/app/docs/%5Bversion%5D/%5Btype%5D/page-4b98c53048a6dfc2.js"],"HeaderLinks"]
5:I[6556,["555","static/chunks/555-438bbb9fc9eaf2f2.js","15","static/chunks/15-abe590a51c908ae0.js","609","static/chunks/app/docs/%5Bversion%5D/%5Btype%5D/page-4b98c53048a6dfc2.js"],"TypeDocumentation"]
7:I[103,[],""]
a:I[5885,[],""]
6:T46f7,<p>The <code><a href="/docs/v4.3.5/Record">Record()</a></code> function produces new Record Factories, which when called
create Record instances.</p>
<code class="codeBlock"><span class="token keyword" >const</span> <span class="token punctuation" >{</span> <span class="token qualifier" >Record</span> <span class="token punctuation" >}</span> <span class="token operator" >=</span> require<span class="token punctuation" >(</span><span class="token string" >'immutable'</span><span class="token punctuation" >)</span>
<span class="token keyword" >const</span> ABRecord <span class="token operator" >=</span> <span class="token qualifier" >Record</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span> a<span class="token punctuation" >:</span> <span class="token number" >1</span><span class="token punctuation" >,</span> b<span class="token punctuation" >:</span> <span class="token number" >2</span> <span class="token punctuation" >}</span><span class="token punctuation" >)</span>
<span class="token keyword" >const</span> myRecord <span class="token operator" >=</span> ABRecord<span class="token punctuation" >(</span><span class="token punctuation" >{</span> b<span class="token punctuation" >:</span> <span class="token number" >3</span> <span class="token punctuation" >}</span><span class="token punctuation" >)</span></code><p>Records always have a value for the keys they define. <code><a href="/docs/v4.3.5/remove()">remove</a></code>ing a key
from a record simply resets it to the default value for that key.</p>
<code class="codeBlock">myRecord<span class="token punctuation" >.</span><span class="token keyword" >get</span><span class="token punctuation" >(</span><span class="token string" >'a'</span><span class="token punctuation" >)</span> <span class="token comment" spellcheck="true">// 1
</span>myRecord<span class="token punctuation" >.</span><span class="token keyword" >get</span><span class="token punctuation" >(</span><span class="token string" >'b'</span><span class="token punctuation" >)</span> <span class="token comment" spellcheck="true">// 3
</span><span class="token keyword" >const</span> myRecordWithoutB <span class="token operator" >=</span> myRecord<span class="token punctuation" >.</span>remove<span class="token punctuation" >(</span><span class="token string" >'b'</span><span class="token punctuation" >)</span>
myRecordWithoutB<span class="token punctuation" >.</span><span class="token keyword" >get</span><span class="token punctuation" >(</span><span class="token string" >'b'</span><span class="token punctuation" >)</span> <span class="token comment" spellcheck="true">// 2</span></code><p>Values provided to the constructor not found in the Record type will
be ignored. For example, in this case, ABRecord is provided a key &quot;x&quot; even
though only &quot;a&quot; and &quot;b&quot; have been defined. The value for &quot;x&quot; will be
ignored for this record.</p>
<code class="codeBlock"><span class="token keyword" >const</span> myRecord <span class="token operator" >=</span> ABRecord<span class="token punctuation" >(</span><span class="token punctuation" >{</span> b<span class="token punctuation" >:</span> <span class="token number" >3</span><span class="token punctuation" >,</span> x<span class="token punctuation" >:</span> <span class="token number" >10</span> <span class="token punctuation" >}</span><span class="token punctuation" >)</span>
myRecord<span class="token punctuation" >.</span><span class="token keyword" >get</span><span class="token punctuation" >(</span><span class="token string" >'x'</span><span class="token punctuation" >)</span> <span class="token comment" spellcheck="true">// undefined</span></code><p>Because Records have a known set of string keys, property get access works
as expected, however property sets will throw an Error.</p>
<p>Note: IE8 does not support property access. Only use <code><a href="/docs/v4.3.5/Record#get()">get()</a></code> when
supporting IE8.</p>
<code class="codeBlock">myRecord<span class="token punctuation" >.</span>b <span class="token comment" spellcheck="true">// 3
</span>myRecord<span class="token punctuation" >.</span>b <span class="token operator" >=</span> <span class="token number" >5</span> <span class="token comment" spellcheck="true">// throws Error</span></code><p>Record Types can be extended as well, allowing for custom methods on your
Record. This is not a common pattern in functional environments, but is in
many JS programs.</p>
<p>However Record Types are more restricted than typical JavaScript classes.
They do not use a class constructor, which also means they cannot use
class properties (since those are technically part of a constructor).</p>
<p>While Record Types can be syntactically created with the JavaScript <code><span class="token keyword" >class</span></code>
form, the resulting Record function is actually a factory function, not a
class constructor. Even though Record Types are not classes, JavaScript
currently requires the use of <code><span class="token keyword" >new</span></code> when creating new Record instances if
they are defined as a <code><span class="token keyword" >class</span></code>.</p>
<code class="codeBlock"><span class="token keyword" >class</span> <span class="token class-name" >ABRecord</span> <span class="token keyword" >extends</span> <span class="token class-name" >Record</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span> a<span class="token punctuation" >:</span> <span class="token number" >1</span><span class="token punctuation" >,</span> b<span class="token punctuation" >:</span> <span class="token number" >2</span> <span class="token punctuation" >}</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>
  getAB<span class="token punctuation" >(</span><span class="token punctuation" >)</span> <span class="token punctuation" >{</span>
    <span class="token keyword" >return</span> <span class="token var" >this</span><span class="token punctuation" >.</span>a <span class="token operator" >+</span> <span class="token var" >this</span><span class="token punctuation" >.</span>b<span class="token punctuation" >;</span>
  <span class="token punctuation" >}</span>
<span class="token punctuation" >}</span>

<span class="token keyword" >var</span> myRecord <span class="token operator" >=</span> <span class="token keyword" >new</span> <span class="token class-name" >ABRecord</span><span class="token punctuation" >(</span><span class="token punctuation" >{</span>b<span class="token punctuation" >:</span> <span class="token number" >3</span><span class="token punctuation" >}</span><span class="token punctuation" >)</span>
myRecord<span class="token punctuation" >.</span>getAB<span class="token punctuation" >(</span><span class="token punctuation" >)</span> <span class="token comment" spellcheck="true">// 4</span></code><p><strong>Flow Typing Records:</strong></p>
<p>Immutable.js exports two Flow types designed to make it easier to use
Records with flow typed code, <code><span class="token qualifier" >Record</span><span class="token qualifier" >Of</span><span class="token operator" >&lt;</span>TProps<span class="token operator" >></span></code> and <code><span class="token qualifier" >Record</span><span class="token qualifier" >Factory</span><span class="token operator" >&lt;</span>TProps<span class="token operator" >></span></code>.</p>
<p>When defining a new kind of Record factory function, use a flow type that
describes the values the record contains along with <code><span class="token qualifier" >Record</span><span class="token qualifier" >Factory</span><span class="token operator" >&lt;</span>TProps<span class="token operator" >></span></code>.
To type instances of the Record (which the factory function returns),
use <code><span class="token qualifier" >Record</span><span class="token qualifier" >Of</span><span class="token operator" >&lt;</span>TProps<span class="token operator" >></span></code>.</p>
<p>Typically, new Record definitions will export both the Record factory
function as well as the Record instance type for use in other code.</p>
<code class="codeBlock"><span class="token keyword" >import</span> type <span class="token punctuation" >{</span> <span class="token qualifier" >Record</span><span class="token qualifier" >Factory</span><span class="token punctuation" >,</span> <span class="token qualifier" >Record</span><span class="token qualifier" >Of</span> <span class="token punctuation" >}</span> from <span class="token string" >'immutable'</span><span class="token punctuation" >;</span>

<span class="token comment" spellcheck="true">// Use RecordFactory&lt;TProps> for defining new Record factory functions.
</span>type <span class="token qualifier" >Point3</span>DProps <span class="token operator" >=</span> <span class="token punctuation" >{</span> x<span class="token punctuation" >:</span> number<span class="token punctuation" >,</span> y<span class="token punctuation" >:</span> number<span class="token punctuation" >,</span> z<span class="token punctuation" >:</span> number <span class="token punctuation" >}</span><span class="token punctuation" >;</span>
<span class="token keyword" >const</span> defaultValues<span class="token punctuation" >:</span> <span class="token qualifier" >Point3</span>DProps <span class="token operator" >=</span> <span class="token punctuation" >{</span> x<span class="token punctuation" >:</span> <span class="token number" >0</span><span class="token punctuation" >,</span> y<span class="token punctuation" >:</span> <span class="token number" >0</span><span class="token punctuation" >,</span> z<span class="token punctuation" >:</span> <span class="token number" >0</span> <span class="token punctuation" >}</span><span class="token punctuation" >;</span>
<span class="token keyword" >const</span> makePoint3D<span class="token punctuation" >:</span> <span class="token qualifier" >Record</span><span class="token qualifier" >Factory</span><span class="token operator" >&lt;</span><span class="token qualifier" >Point3</span>DProps<span class="token operator" >></span> <span class="token operator" >=</span> <span class="token qualifier" >Record</span><span class="token punctuation" >(</span>defaultValues<span class="token punctuation" >)</span><span class="token punctuation" >;</span>
<span class="token keyword" >export</span> makePoint3D<span class="token punctuation" >;</span>

<span class="token comment" spellcheck="true">// Use RecordOf&lt;T> for defining new instances of that Record.
</span><span class="token keyword" >export</span> type <span class="token qualifier" >Point3</span>D <span class="token operator" >=</span> <span class="token qualifier" >Record</span><span class="token qualifier" >Of</span><span class="token operator" >&lt;</span><span class="token qualifier" >Point3</span>DProps<span class="token operator" >></span><span class="token punctuation" >;</span>
<span class="token keyword" >const</span> some3DPoint<span class="token punctuation" >:</span> <span class="token qualifier" >Point3</span>D <span class="token operator" >=</span> makePoint3D<span class="token punctuation" >(</span><span class="token punctuation" >{</span> x<span class="token punctuation" >:</span> <span class="token number" >10</span><span class="token punctuation" >,</span> y<span class="token punctuation" >:</span> <span class="token number" >20</span><span class="token punctuation" >,</span> z<span class="token punctuation" >:</span> <span class="token number" >30</span> <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span></code><p><strong>Flow Typing Record Subclasses:</strong></p>
<p>Records can be subclassed as a means to add additional methods to Record
instances. This is generally discouraged in favor of a more functional API,
since Subclasses have some minor overhead. However the ability to create
a rich API on Record types can be quite valuable.</p>
<p>When using Flow to type Subclasses, do not use <code><span class="token qualifier" >Record</span><span class="token qualifier" >Factory</span><span class="token operator" >&lt;</span>TProps<span class="token operator" >></span></code>,
instead apply the props type when subclassing:</p>
<code class="codeBlock">type <span class="token qualifier" >Person</span><span class="token qualifier" >Props</span> <span class="token operator" >=</span> <span class="token punctuation" >{</span>name<span class="token punctuation" >:</span> string<span class="token punctuation" >,</span> age<span class="token punctuation" >:</span> number<span class="token punctuation" >}</span><span class="token punctuation" >;</span>
<span class="token keyword" >const</span> defaultValues<span class="token punctuation" >:</span> <span class="token qualifier" >Person</span><span class="token qualifier" >Props</span> <span class="token operator" >=</span> <span class="token punctuation" >{</span>name<span class="token punctuation" >:</span> <span class="token string" >'Aristotle'</span><span class="token punctuation" >,</span> age<span class="token punctuation" >:</span> <span class="token number" >2400</span><span class="token punctuation" >}</span><span class="token punctuation" >;</span>
<span class="token keyword" >const</span> <span class="token qualifier" >Person</span><span class="token qualifier" >Record</span> <span class="token operator" >=</span> <span class="token qualifier" >Record</span><span class="token punctuation" >(</span>defaultValues<span class="token punctuation" >)</span><span class="token punctuation" >;</span>
<span class="token keyword" >class</span> <span class="token class-name" >Person</span> <span class="token keyword" >extends</span> <span class="token class-name" >PersonRecord</span><span class="token operator" >&lt;</span><span class="token qualifier" >Person</span><span class="token qualifier" >Props</span><span class="token operator" >></span> <span class="token punctuation" >{</span>
  getName<span class="token punctuation" >(</span><span class="token punctuation" >)</span><span class="token punctuation" >:</span> string <span class="token punctuation" >{</span>
    <span class="token keyword" >return</span> <span class="token var" >this</span><span class="token punctuation" >.</span><span class="token keyword" >get</span><span class="token punctuation" >(</span><span class="token string" >'name'</span><span class="token punctuation" >)</span>
  <span class="token punctuation" >}</span>

  setName<span class="token punctuation" >(</span>name<span class="token punctuation" >:</span> string<span class="token punctuation" >)</span><span class="token punctuation" >:</span> <span class="token var" >this</span> <span class="token punctuation" >{</span>
    <span class="token keyword" >return</span> <span class="token var" >this</span><span class="token punctuation" >.</span><span class="token keyword" >set</span><span class="token punctuation" >(</span><span class="token string" >'name'</span><span class="token punctuation" >,</span> name<span class="token punctuation" >)</span><span class="token punctuation" >;</span>
  <span class="token punctuation" >}</span>
<span class="token punctuation" >}</span></code><p><strong>Choosing Records vs plain JavaScript objects</strong></p>
<p>Records offer a persistently immutable alternative to plain JavaScript
objects, however they&#39;re not required to be used within Immutable.js
collections. In fact, the deep-access and deep-updating functions
like <code><a href="/docs/v4.3.5/Record#getIn()">getIn()</a></code> and <code><a href="/docs/v4.3.5/Record#setIn()">setIn()</a></code> work with plain JavaScript Objects as well.</p>
<p>Deciding to use Records or Objects in your application should be informed
by the tradeoffs and relative benefits of each:</p>
<ul>
<li><p><em>Runtime immutability</em>: plain JS objects may be carefully treated as
immutable, however Record instances will <em>throw</em> if attempted to be
mutated directly. Records provide this additional guarantee, however at
some marginal runtime cost. While JS objects are mutable by nature, the
use of type-checking tools like <a href="https://medium.com/@gcanti/immutability-with-flow-faa050a1aef4">Flow</a>
can help gain confidence in code written to favor immutability.</p>
</li>
<li><p><em>Value equality</em>: Records use value equality when compared with <code><a href="/docs/v4.3.5/is()">is()</a></code>
or <code>record<span class="token punctuation" >.</span>equals<span class="token punctuation" >(</span><span class="token punctuation" >)</span></code>. That is, two Records with the same keys and values
are equal. Plain objects use <em>reference equality</em>. Two objects with the
same keys and values are not equal since they are different objects.
This is important to consider when using objects as keys in a <code><a href="/docs/v4.3.5/Map">Map</a></code> or
values in a <code><a href="/docs/v4.3.5/Set">Set</a></code>, which use equality when retrieving values.</p>
</li>
<li><p><em>API methods</em>: Records have a full featured API, with methods like
<code><span class="token punctuation" >.</span>getIn<span class="token punctuation" >(</span><span class="token punctuation" >)</span></code>, and <code><span class="token punctuation" >.</span>equals<span class="token punctuation" >(</span><span class="token punctuation" >)</span></code>. These can make working with these values
easier, but comes at the cost of not allowing keys with those names.</p>
</li>
<li><p><em>Default values</em>: Records provide default values for every key, which
can be useful when constructing Records with often unchanging values.
However default values can make using Flow and TypeScript more laborious.</p>
</li>
<li><p><em>Serialization</em>: Records use a custom internal representation to
efficiently store and update their values. Converting to and from this
form isn&#39;t free. If converting Records to plain objects is common,
consider sticking with plain objects to begin with.</p>
</li>
</ul>
8:["version","v4.3.5","d"]
9:["type","Record","d"]
0:["GwjFkqkDPK4v2XgIMR-Sd",[[["",{"children":["docs",{"children":[["version","v4.3.5","d"],{"children":[["type","Record","d"],{"children":["__PAGE__?{\"version\":\"v4.3.5\",\"type\":\"Record\"}",{}]}]}]}]},"$undefined","$undefined",true],["",{"children":["docs",{"children":[["version","v4.3.5","d"],{"children":[["type","Record","d"],{"children":["__PAGE__",{},["$L1",["$","div",null,{"children":[["$","$L2",null,{"version":"v4.3.5"}],["$","div",null,{"className":"header","children":["$","div",null,{"className":"miniHeader","children":["$","div",null,{"className":"miniHeaderContents","children":[["$","$L3",null,{}],["$","$L4",null,{"versions":["v4.3.5","v3.8.2","latest@main"],"currentVersion":"v4.3.5"}]]}]}]}],["$","div",null,{"className":"pageBody","children":["$","div",null,{"className":"contents","children":["$","$L5",null,{"def":{"qualifiedName":"Record","doc":{"synopsis":"<p>A record is similar to a JS object, but enforces a specific set of allowed\nstring keys, and has default values.</p>\n","description":"$6","notes":[]},"functions":{"isRecord":{"name":"Record.isRecord","label":"Record.isRecord()","id":"isRecord()","isStatic":true,"signatures":[{"line":2547,"params":[{"name":"maybeRecord","type":{"k":2}}],"type":{"k":5}}],"url":"/docs/v4.3.5/Record#isRecord()"},"getDescriptiveName":{"name":"Record.getDescriptiveName","label":"Record.getDescriptiveName()","id":"getDescriptiveName()","isStatic":true,"signatures":[{"line":2566,"params":[{"name":"record","type":{"k":12,"name":"Record","args":[{"k":1}],"url":"/docs/v4.3.5/Record"}}],"type":{"k":7}}],"url":"/docs/v4.3.5/Record#getDescriptiveName()"}},"call":{"name":"Record","label":"Record()","id":"Record()","doc":{"synopsis":"<p>Unlike other types in Immutable.js, the <code><a href=\"/docs/v4.3.5/Record\">Record()</a></code> function creates a new\nRecord Factory, which is a function that creates Record instances.</p>\n","description":"<p>See above for examples of using <code><a href=\"/docs/v4.3.5/Record\">Record()</a></code>.</p>\n<p>Note: <code><a href=\"/docs/v4.3.5/Record\">Record</a></code> is a factory function and not a class, and does not use the\n<code><span class=\"token keyword\" >new</span></code> keyword during construction.</p>\n","notes":[]},"signatures":[{"line":2646,"typeParams":["TProps"],"params":[{"name":"defaultValues","type":{"k":11,"param":"TProps"}},{"name":"name","type":{"k":7},"optional":true}],"type":{"k":12,"name":"Record.Factory","args":[{"k":11,"param":"TProps"}],"url":"/docs/v4.3.5/Record.Factory"}}],"url":"/docs/v4.3.5/Record#Record()"},"interface":{"members":{"has":{"name":"has","label":"has()","id":"has()","group":"Reading values","signatures":[{"line":2654,"params":[{"name":"key","type":{"k":7}}],"type":{"k":5}}],"url":"/docs/v4.3.5/Record#has()"},"get":{"name":"get","label":"get()","id":"get()","group":"Reading values","signatures":[{"line":2664,"typeParams":["K"],"params":[{"name":"key","type":{"k":11,"param":"K"}},{"name":"notSetValue","type":{"k":2},"optional":true}],"type":{"k":16,"type":{"k":11,"param":"TProps"},"index":{"k":11,"param":"K"}}},{"line":2665,"typeParams":["T"],"params":[{"name":"key","type":{"k":7}},{"name":"notSetValue","type":{"k":11,"param":"T"}}],"type":{"k":11,"param":"T"}}],"url":"/docs/v4.3.5/Record#get()"},"hasIn":{"name":"hasIn","label":"hasIn()","id":"hasIn()","group":"Reading deep values","signatures":[{"line":2669,"params":[{"name":"keyPath","type":{"k":12,"name":"Iterable","args":[{"k":2}]}}],"type":{"k":5}}],"url":"/docs/v4.3.5/Record#hasIn()"},"getIn":{"name":"getIn","label":"getIn()","id":"getIn()","group":"Reading deep values","signatures":[{"line":2670,"params":[{"name":"keyPath","type":{"k":12,"name":"Iterable","args":[{"k":2}]}}],"type":{"k":2}}],"url":"/docs/v4.3.5/Record#getIn()"},"equals":{"name":"equals","label":"equals()","id":"equals()","group":"Value equality","signatures":[{"line":2674,"params":[{"name":"other","type":{"k":2}}],"type":{"k":5}}],"url":"/docs/v4.3.5/Record#equals()"},"hashCode":{"name":"hashCode","label":"hashCode()","id":"hashCode()","group":"Value equality","signatures":[{"line":2675,"type":{"k":6}}],"url":"/docs/v4.3.5/Record#hashCode()"},"set":{"name":"set","label":"set()","id":"set()","group":"Persistent changes","signatures":[{"line":2679,"typeParams":["K"],"params":[{"name":"key","type":{"k":11,"param":"K"}},{"name":"value","type":{"k":16,"type":{"k":11,"param":"TProps"},"index":{"k":11,"param":"K"}}}],"type":{"k":3}}],"url":"/docs/v4.3.5/Record#set()"},"update":{"name":"update","label":"update()","id":"update()","group":"Persistent changes","signatures":[{"line":2680,"typeParams":["K"],"params":[{"name":"key","type":{"k":11,"param":"K"}},{"name":"updater","type":{"k":10,"params":[{"name":"value","type":{"k":16,"type":{"k":11,"param":"TProps"},"index":{"k":11,"param":"K"}}}],"type":{"k":16,"type":{"k":11,"param":"TProps"},"index":{"k":11,"param":"K"}}}}],"type":{"k":3}}],"url":"/docs/v4.3.5/Record#update()"},"merge":{"name":"merge","label":"merge()","id":"merge()","group":"Persistent changes","signatures":[{"line":2684,"params":[{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":13,"types":[{"k":12,"name":"Partial","args":[{"k":11,"param":"TProps"}]},{"k":12,"name":"Iterable","args":[{"k":15,"types":[{"k":7},{"k":2}]}]}]}]},"varArgs":true}],"type":{"k":3}}],"url":"/docs/v4.3.5/Record#merge()"},"mergeDeep":{"name":"mergeDeep","label":"mergeDeep()","id":"mergeDeep()","group":"Persistent changes","signatures":[{"line":2687,"params":[{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":13,"types":[{"k":12,"name":"Partial","args":[{"k":11,"param":"TProps"}]},{"k":12,"name":"Iterable","args":[{"k":15,"types":[{"k":7},{"k":2}]}]}]}]},"varArgs":true}],"type":{"k":3}}],"url":"/docs/v4.3.5/Record#mergeDeep()"},"mergeWith":{"name":"mergeWith","label":"mergeWith()","id":"mergeWith()","group":"Persistent changes","signatures":[{"line":2691,"params":[{"name":"merger","type":{"k":10,"params":[{"name":"oldVal","type":{"k":2}},{"name":"newVal","type":{"k":2}},{"name":"key","type":{"k":17,"operator":"keyof","type":{"k":11,"param":"TProps"}}}],"type":{"k":2}}},{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":13,"types":[{"k":12,"name":"Partial","args":[{"k":11,"param":"TProps"}]},{"k":12,"name":"Iterable","args":[{"k":15,"types":[{"k":7},{"k":2}]}]}]}]},"varArgs":true}],"type":{"k":3}}],"url":"/docs/v4.3.5/Record#mergeWith()"},"mergeDeepWith":{"name":"mergeDeepWith","label":"mergeDeepWith()","id":"mergeDeepWith()","group":"Persistent changes","signatures":[{"line":2695,"params":[{"name":"merger","type":{"k":10,"params":[{"name":"oldVal","type":{"k":2}},{"name":"newVal","type":{"k":2}},{"name":"key","type":{"k":2}}],"type":{"k":2}}},{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":13,"types":[{"k":12,"name":"Partial","args":[{"k":11,"param":"TProps"}]},{"k":12,"name":"Iterable","args":[{"k":15,"types":[{"k":7},{"k":2}]}]}]}]},"varArgs":true}],"type":{"k":3}}],"url":"/docs/v4.3.5/Record#mergeDeepWith()"},"delete":{"name":"delete","label":"delete()","id":"delete()","group":"Persistent changes","doc":{"synopsis":"<p>Returns a new instance of this Record type with the value for the\nspecific key set to its default value.</p>\n","description":"","notes":[{"name":"alias","body":"remove"}]},"signatures":[{"line":2706,"typeParams":["K"],"params":[{"name":"key","type":{"k":11,"param":"K"}}],"type":{"k":3}}],"url":"/docs/v4.3.5/Record#delete()"},"clear":{"name":"clear","label":"clear()","id":"clear()","group":"Persistent changes","doc":{"synopsis":"<p>Returns a new instance of this Record type with all values set\nto their default values.</p>\n","description":"","notes":[]},"signatures":[{"line":2713,"type":{"k":3}}],"url":"/docs/v4.3.5/Record#clear()"},"setIn":{"name":"setIn","label":"setIn()","id":"setIn()","group":"Deep persistent changes","signatures":[{"line":2717,"params":[{"name":"keyPath","type":{"k":12,"name":"Iterable","args":[{"k":2}]}},{"name":"value","type":{"k":2}}],"type":{"k":3}}],"url":"/docs/v4.3.5/Record#setIn()"},"updateIn":{"name":"updateIn","label":"updateIn()","id":"updateIn()","group":"Deep persistent changes","signatures":[{"line":2718,"params":[{"name":"keyPath","type":{"k":12,"name":"Iterable","args":[{"k":2}]}},{"name":"updater","type":{"k":10,"params":[{"name":"value","type":{"k":2}}],"type":{"k":2}}}],"type":{"k":3}}],"url":"/docs/v4.3.5/Record#updateIn()"},"mergeIn":{"name":"mergeIn","label":"mergeIn()","id":"mergeIn()","group":"Deep persistent changes","signatures":[{"line":2722,"params":[{"name":"keyPath","type":{"k":12,"name":"Iterable","args":[{"k":2}]}},{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":2}]},"varArgs":true}],"type":{"k":3}}],"url":"/docs/v4.3.5/Record#mergeIn()"},"mergeDeepIn":{"name":"mergeDeepIn","label":"mergeDeepIn()","id":"mergeDeepIn()","group":"Deep persistent changes","signatures":[{"line":2723,"params":[{"name":"keyPath","type":{"k":12,"name":"Iterable","args":[{"k":2}]}},{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":2}]},"varArgs":true}],"type":{"k":3}}],"url":"/docs/v4.3.5/Record#mergeDeepIn()"},"deleteIn":{"name":"deleteIn","label":"deleteIn()","id":"deleteIn()","group":"Deep persistent changes","doc":{"synopsis":"","description":"","notes":[{"name":"alias","body":"removeIn"}]},"signatures":[{"line":2731,"params":[{"name":"keyPath","type":{"k":12,"name":"Iterable","args":[{"k":2}]}}],"type":{"k":3}}],"url":"/docs/v4.3.5/Record#deleteIn()"},"toJS":{"name":"toJS","label":"toJS()","id":"toJS()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Deeply converts this Record to equivalent native JavaScript Object.</p>\n","description":"<p>Note: This method may not be overridden. Objects with custom\nserialization to plain JS may override toJSON() instead.</p>\n","notes":[]},"signatures":[{"line":2742,"type":{"k":12,"name":"DeepCopy","args":[{"k":11,"param":"TProps"}]}}],"url":"/docs/v4.3.5/Record#toJS()"},"toJSON":{"name":"toJSON","label":"toJSON()","id":"toJSON()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Shallowly converts this Record to equivalent native JavaScript Object.</p>\n","description":"","notes":[]},"signatures":[{"line":2747,"type":{"k":11,"param":"TProps"}}],"url":"/docs/v4.3.5/Record#toJSON()"},"toObject":{"name":"toObject","label":"toObject()","id":"toObject()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Shallowly converts this Record to equivalent JavaScript Object.</p>\n","description":"","notes":[]},"signatures":[{"line":2752,"type":{"k":11,"param":"TProps"}}],"url":"/docs/v4.3.5/Record#toObject()"},"withMutations":{"name":"withMutations","label":"withMutations()","id":"withMutations()","group":"Transient changes","doc":{"synopsis":"<p>Note: Not all methods can be used on a mutable collection or within\n<code><a href=\"/docs/v4.3.5/Record#withMutations()\">withMutations</a></code>! Only <code><a href=\"/docs/v4.3.5/Record#set()\">set</a></code> may be used mutatively.</p>\n","description":"","notes":[{"name":"see","body":"<p><code><a href=\"/docs/v4.3.5/Map#withMutations()\">Map#withMutations</a></code></p>\n"}]},"signatures":[{"line":2762,"params":[{"name":"mutator","type":{"k":10,"params":[{"name":"mutable","type":{"k":3}}],"type":{"k":2}}}],"type":{"k":3}}],"url":"/docs/v4.3.5/Record#withMutations()"},"asMutable":{"name":"asMutable","label":"asMutable()","id":"asMutable()","group":"Transient changes","doc":{"synopsis":"","description":"","notes":[{"name":"see","body":"<p><code><a href=\"/docs/v4.3.5/Map#asMutable()\">Map#asMutable</a></code></p>\n"}]},"signatures":[{"line":2767,"type":{"k":3}}],"url":"/docs/v4.3.5/Record#asMutable()"},"wasAltered":{"name":"wasAltered","label":"wasAltered()","id":"wasAltered()","group":"Transient changes","doc":{"synopsis":"","description":"","notes":[{"name":"see","body":"<p><code><a href=\"/docs/v4.3.5/Map#wasAltered()\">Map#wasAltered</a></code></p>\n"}]},"signatures":[{"line":2772,"type":{"k":5}}],"url":"/docs/v4.3.5/Record#wasAltered()"},"asImmutable":{"name":"asImmutable","label":"asImmutable()","id":"asImmutable()","group":"Transient changes","doc":{"synopsis":"","description":"","notes":[{"name":"see","body":"<p><code><a href=\"/docs/v4.3.5/Map#asImmutable()\">Map#asImmutable</a></code></p>\n"}]},"signatures":[{"line":2777,"type":{"k":3}}],"url":"/docs/v4.3.5/Record#asImmutable()"},"toSeq":{"name":"toSeq","label":"toSeq()","id":"toSeq()","group":"Sequence algorithms","signatures":[{"line":2781,"type":{"k":12,"name":"Seq.Keyed","args":[{"k":17,"operator":"keyof","type":{"k":11,"param":"TProps"}},{"k":16,"type":{"k":11,"param":"TProps"},"index":{"k":17,"operator":"keyof","type":{"k":11,"param":"TProps"}}}],"url":"/docs/v4.3.5/Seq.Keyed"}}],"url":"/docs/v4.3.5/Record#toSeq()"},"[Symbol.iterator]":{"name":"[Symbol.iterator]","label":"[Symbol.iterator]()","id":"[Symbol.iterator]()","group":"Sequence algorithms","signatures":[{"line":2783,"type":{"k":12,"name":"IterableIterator","args":[{"k":15,"types":[{"k":17,"operator":"keyof","type":{"k":11,"param":"TProps"}},{"k":16,"type":{"k":11,"param":"TProps"},"index":{"k":17,"operator":"keyof","type":{"k":11,"param":"TProps"}}}]}]}}],"url":"/docs/v4.3.5/Record#[Symbol.iterator]()"}},"line":2651,"typeParams":["TProps"]},"label":"Record","url":"/docs/v4.3.5/Record"},"sidebarLinks":[{"label":"List","url":"/docs/v4.3.5/List"},{"label":"Map","url":"/docs/v4.3.5/Map"},{"label":"OrderedMap","url":"/docs/v4.3.5/OrderedMap"},{"label":"Set","url":"/docs/v4.3.5/Set"},{"label":"OrderedSet","url":"/docs/v4.3.5/OrderedSet"},{"label":"Stack","url":"/docs/v4.3.5/Stack"},{"label":"Range()","url":"/docs/v4.3.5/Range()"},{"label":"Repeat()","url":"/docs/v4.3.5/Repeat()"},{"label":"Record","url":"/docs/v4.3.5/Record"},{"label":"Record.Factory","url":"/docs/v4.3.5/Record.Factory"},{"label":"Seq","url":"/docs/v4.3.5/Seq"},{"label":"Seq.Keyed","url":"/docs/v4.3.5/Seq.Keyed"},{"label":"Seq.Indexed","url":"/docs/v4.3.5/Seq.Indexed"},{"label":"Seq.Set","url":"/docs/v4.3.5/Seq.Set"},{"label":"Collection","url":"/docs/v4.3.5/Collection"},{"label":"Collection.Keyed","url":"/docs/v4.3.5/Collection.Keyed"},{"label":"Collection.Indexed","url":"/docs/v4.3.5/Collection.Indexed"},{"label":"Collection.Set","url":"/docs/v4.3.5/Collection.Set"},{"label":"ValueObject","url":"/docs/v4.3.5/ValueObject"},{"label":"fromJS()","url":"/docs/v4.3.5/fromJS()"},{"label":"is()","url":"/docs/v4.3.5/is()"},{"label":"hash()","url":"/docs/v4.3.5/hash()"},{"label":"isImmutable()","url":"/docs/v4.3.5/isImmutable()"},{"label":"isCollection()","url":"/docs/v4.3.5/isCollection()"},{"label":"isKeyed()","url":"/docs/v4.3.5/isKeyed()"},{"label":"isIndexed()","url":"/docs/v4.3.5/isIndexed()"},{"label":"isAssociative()","url":"/docs/v4.3.5/isAssociative()"},{"label":"isOrdered()","url":"/docs/v4.3.5/isOrdered()"},{"label":"isValueObject()","url":"/docs/v4.3.5/isValueObject()"},{"label":"isSeq()","url":"/docs/v4.3.5/isSeq()"},{"label":"isList()","url":"/docs/v4.3.5/isList()"},{"label":"isMap()","url":"/docs/v4.3.5/isMap()"},{"label":"isOrderedMap()","url":"/docs/v4.3.5/isOrderedMap()"},{"label":"isStack()","url":"/docs/v4.3.5/isStack()"},{"label":"isSet()","url":"/docs/v4.3.5/isSet()"},{"label":"isOrderedSet()","url":"/docs/v4.3.5/isOrderedSet()"},{"label":"isRecord()","url":"/docs/v4.3.5/isRecord()"},{"label":"get()","url":"/docs/v4.3.5/get()"},{"label":"has()","url":"/docs/v4.3.5/has()"},{"label":"remove()","url":"/docs/v4.3.5/remove()"},{"label":"set()","url":"/docs/v4.3.5/set()"},{"label":"update()","url":"/docs/v4.3.5/update()"},{"label":"getIn()","url":"/docs/v4.3.5/getIn()"},{"label":"hasIn()","url":"/docs/v4.3.5/hasIn()"},{"label":"removeIn()","url":"/docs/v4.3.5/removeIn()"},{"label":"setIn()","url":"/docs/v4.3.5/setIn()"},{"label":"updateIn()","url":"/docs/v4.3.5/updateIn()"},{"label":"merge()","url":"/docs/v4.3.5/merge()"},{"label":"mergeWith()","url":"/docs/v4.3.5/mergeWith()"},{"label":"mergeDeep()","url":"/docs/v4.3.5/mergeDeep()"},{"label":"mergeDeepWith()","url":"/docs/v4.3.5/mergeDeepWith()"}]}]}]}]]}],null]]},["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children","$8","children","$9","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children","$8","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"en","children":["$","body",null,{"children":["$","$L7",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$La",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f4479af2108893f8.css","precedence":"next","crossOrigin":""}]],"$Lb"]]]]
b:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Record — Immutable.js"}],["$","link","3",{"rel":"icon","href":"/favicon.png"}]]
1:null
