2:I[4063,["555","static/chunks/555-438bbb9fc9eaf2f2.js","15","static/chunks/15-abe590a51c908ae0.js","227","static/chunks/app/docs/%5Bversion%5D/page-337c05329ad3b16c.js"],"ImmutableConsole"]
3:I[914,["555","static/chunks/555-438bbb9fc9eaf2f2.js","15","static/chunks/15-abe590a51c908ae0.js","227","static/chunks/app/docs/%5Bversion%5D/page-337c05329ad3b16c.js"],"HeaderLogoLink"]
4:I[914,["555","static/chunks/555-438bbb9fc9eaf2f2.js","15","static/chunks/15-abe590a51c908ae0.js","227","static/chunks/app/docs/%5Bversion%5D/page-337c05329ad3b16c.js"],"HeaderLinks"]
5:I[9698,["555","static/chunks/555-438bbb9fc9eaf2f2.js","15","static/chunks/15-abe590a51c908ae0.js","227","static/chunks/app/docs/%5Bversion%5D/page-337c05329ad3b16c.js"],"SideBar"]
6:I[7065,["555","static/chunks/555-438bbb9fc9eaf2f2.js","15","static/chunks/15-abe590a51c908ae0.js","227","static/chunks/app/docs/%5Bversion%5D/page-337c05329ad3b16c.js"],"DocSearch"]
7:I[4303,["555","static/chunks/555-438bbb9fc9eaf2f2.js","15","static/chunks/15-abe590a51c908ae0.js","227","static/chunks/app/docs/%5Bversion%5D/page-337c05329ad3b16c.js"],"MarkdownContent"]
9:I[1844,["555","static/chunks/555-438bbb9fc9eaf2f2.js","15","static/chunks/15-abe590a51c908ae0.js","227","static/chunks/app/docs/%5Bversion%5D/page-337c05329ad3b16c.js"],""]
a:I[103,[],""]
c:I[5885,[],""]
8:T1a4d,<p>While designed to bring these powerful functional concepts to JavaScript, it
presents an Object-Oriented API familiar to Javascript engineers and closely
mirroring that of Array, Map, and Set. It is easy and efficient to convert to
and from plain Javascript types.</p>
<h2 id="how-to-read-these-docs">How to read these docs</h2>
<p>In order to better explain what kinds of values the Immutable.js API expects
and produces, this documentation is presented in a statically typed dialect of
JavaScript (like <a href="https://flowtype.org/">Flow</a> or <a href="https://www.typescriptlang.org/">TypeScript</a>). You <em>don&#39;t need</em> to use these
type checking tools in order to use Immutable.js, however becoming familiar
with their syntax will help you get a deeper understanding of this API.</p>
<p><strong>A few examples and how to read them.</strong></p>
<p>All methods describe the kinds of data they accept and the kinds of data
they return. For example a function which accepts two numbers and returns
a number would look like this:</p>
<code class="codeBlock">sum<span class="token punctuation" >(</span>first<span class="token punctuation" >:</span> number<span class="token punctuation" >,</span> second<span class="token punctuation" >:</span> number<span class="token punctuation" >)</span><span class="token punctuation" >:</span> number</code><p>Sometimes, methods can accept different kinds of data or return different
kinds of data, and this is described with a <em>type variable</em>, which is
typically in all-caps. For example, a function which always returns the same
kind of data it was provided would look like this:</p>
<code class="codeBlock">identity<span class="token operator" >&lt;</span>T<span class="token operator" >></span><span class="token punctuation" >(</span>value<span class="token punctuation" >:</span> T<span class="token punctuation" >)</span><span class="token punctuation" >:</span> T</code><p>Type variables are defined with classes and referred to in methods. For
example, a class that holds onto a value for you might look like this:</p>
<code class="codeBlock"><span class="token keyword" >class</span> <span class="token class-name" >Box</span><span class="token operator" >&lt;</span>T<span class="token operator" >></span> <span class="token punctuation" >{</span>
  constructor<span class="token punctuation" >(</span>value<span class="token punctuation" >:</span> T<span class="token punctuation" >)</span>
  getValue<span class="token punctuation" >(</span><span class="token punctuation" >)</span><span class="token punctuation" >:</span> T
<span class="token punctuation" >}</span></code><p>In order to manipulate Immutable data, methods that we&#39;re used to affecting
a Collection instead return a new Collection of the same type. The type
<code><span class="token var" >this</span></code> refers to the same kind of class. For example, a List which returns
new Lists when you <code>push</code> a value onto it might look like:</p>
<code class="codeBlock"><span class="token keyword" >class</span> <span class="token class-name" >List</span><span class="token operator" >&lt;</span>T<span class="token operator" >></span> <span class="token punctuation" >{</span>
  push<span class="token punctuation" >(</span>value<span class="token punctuation" >:</span> T<span class="token punctuation" >)</span><span class="token punctuation" >:</span> <span class="token var" >this</span>
<span class="token punctuation" >}</span></code><p>Many methods in Immutable.js accept values which implement the JavaScript
<a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols">Iterable</a> protocol, and might appear like <code><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol" target="_blank" rel="noopener">Iterable&lt;string&gt;</a></code> for something
which represents sequence of strings. Typically in JavaScript we use plain
Arrays (<code><span class="token punctuation" >[</span><span class="token punctuation" >]</span></code>) when an Iterable is expected, but also all of the Immutable.js
collections are iterable themselves!</p>
<p>For example, to get a value deep within a structure of data, we might use
<code><a href="/docs/v4.3.5/getIn()">getIn</a></code> which expects an <code><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#the_iterable_protocol" target="_blank" rel="noopener">Iterable</a></code> path:</p>
<code class="codeBlock">getIn<span class="token punctuation" >(</span>path<span class="token punctuation" >:</span> <span class="token qualifier" >Iterable</span><span class="token operator" >&lt;</span>string <span class="token operator" >|</span> number<span class="token operator" >></span><span class="token punctuation" >)</span><span class="token punctuation" >:</span> unknown</code><p>To use this method, we could pass an array: <code>data<span class="token punctuation" >.</span>getIn<span class="token punctuation" >(</span><span class="token punctuation" >[</span> <span class="token string" >"key"</span><span class="token punctuation" >,</span> <span class="token number" >2</span> <span class="token punctuation" >]</span><span class="token punctuation" >)</span></code>.</p>
<p>Note: All examples are presented in the modern <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/New_in_JavaScript/ECMAScript_6_support_in_Mozilla">ES2015</a> version of
JavaScript. Use tools like Babel to support older browsers.</p>
<p>For example:</p>
<code class="codeBlock"><span class="token comment" spellcheck="true">// ES2015
</span><span class="token keyword" >const</span> mappedFoo <span class="token operator" >=</span> foo<span class="token punctuation" >.</span>map<span class="token punctuation" >(</span>x <span class="token operator" >=</span><span class="token operator" >></span> x <span class="token operator" >*</span> x<span class="token punctuation" >)</span><span class="token punctuation" >;</span>
<span class="token comment" spellcheck="true">// ES5
</span><span class="token keyword" >var</span> mappedFoo <span class="token operator" >=</span> foo<span class="token punctuation" >.</span>map<span class="token punctuation" >(</span><span class="token block-keyword" >function</span> <span class="token punctuation" >(</span>x<span class="token punctuation" >)</span> <span class="token punctuation" >{</span> <span class="token keyword" >return</span> x <span class="token operator" >*</span> x<span class="token punctuation" >;</span> <span class="token punctuation" >}</span><span class="token punctuation" >)</span><span class="token punctuation" >;</span></code>b:["version","v4.3.5","d"]
0:["gqNs-7e9F3jaHnc-xl9Uh",[[["",{"children":["docs",{"children":[["version","v4.3.5","d"],{"children":["__PAGE__?{\"version\":\"v4.3.5\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["docs",{"children":[["version","v4.3.5","d"],{"children":["__PAGE__",{},["$L1",["$","div",null,{"children":[["$","$L2",null,{"version":"v4.3.5"}],["$","div",null,{"className":"header","children":["$","div",null,{"className":"miniHeader","children":["$","div",null,{"className":"miniHeaderContents","children":[["$","$L3",null,{}],["$","$L4",null,{"versions":["v4.3.5","v3.8.2","latest@main"],"currentVersion":"v4.3.5"}]]}]}]}],["$","div",null,{"className":"pageBody","children":["$","div",null,{"className":"contents","children":[["$","$L5",null,{"links":[{"label":"List","url":"/docs/v4.3.5/List"},{"label":"Map","url":"/docs/v4.3.5/Map"},{"label":"OrderedMap","url":"/docs/v4.3.5/OrderedMap"},{"label":"Set","url":"/docs/v4.3.5/Set"},{"label":"OrderedSet","url":"/docs/v4.3.5/OrderedSet"},{"label":"Stack","url":"/docs/v4.3.5/Stack"},{"label":"Range()","url":"/docs/v4.3.5/Range()"},{"label":"Repeat()","url":"/docs/v4.3.5/Repeat()"},{"label":"Record","url":"/docs/v4.3.5/Record"},{"label":"Record.Factory","url":"/docs/v4.3.5/Record.Factory"},{"label":"Seq","url":"/docs/v4.3.5/Seq"},{"label":"Seq.Keyed","url":"/docs/v4.3.5/Seq.Keyed"},{"label":"Seq.Indexed","url":"/docs/v4.3.5/Seq.Indexed"},{"label":"Seq.Set","url":"/docs/v4.3.5/Seq.Set"},{"label":"Collection","url":"/docs/v4.3.5/Collection"},{"label":"Collection.Keyed","url":"/docs/v4.3.5/Collection.Keyed"},{"label":"Collection.Indexed","url":"/docs/v4.3.5/Collection.Indexed"},{"label":"Collection.Set","url":"/docs/v4.3.5/Collection.Set"},{"label":"ValueObject","url":"/docs/v4.3.5/ValueObject"},{"label":"fromJS()","url":"/docs/v4.3.5/fromJS()"},{"label":"is()","url":"/docs/v4.3.5/is()"},{"label":"hash()","url":"/docs/v4.3.5/hash()"},{"label":"isImmutable()","url":"/docs/v4.3.5/isImmutable()"},{"label":"isCollection()","url":"/docs/v4.3.5/isCollection()"},{"label":"isKeyed()","url":"/docs/v4.3.5/isKeyed()"},{"label":"isIndexed()","url":"/docs/v4.3.5/isIndexed()"},{"label":"isAssociative()","url":"/docs/v4.3.5/isAssociative()"},{"label":"isOrdered()","url":"/docs/v4.3.5/isOrdered()"},{"label":"isValueObject()","url":"/docs/v4.3.5/isValueObject()"},{"label":"isSeq()","url":"/docs/v4.3.5/isSeq()"},{"label":"isList()","url":"/docs/v4.3.5/isList()"},{"label":"isMap()","url":"/docs/v4.3.5/isMap()"},{"label":"isOrderedMap()","url":"/docs/v4.3.5/isOrderedMap()"},{"label":"isStack()","url":"/docs/v4.3.5/isStack()"},{"label":"isSet()","url":"/docs/v4.3.5/isSet()"},{"label":"isOrderedSet()","url":"/docs/v4.3.5/isOrderedSet()"},{"label":"isRecord()","url":"/docs/v4.3.5/isRecord()"},{"label":"get()","url":"/docs/v4.3.5/get()"},{"label":"has()","url":"/docs/v4.3.5/has()"},{"label":"remove()","url":"/docs/v4.3.5/remove()"},{"label":"set()","url":"/docs/v4.3.5/set()"},{"label":"update()","url":"/docs/v4.3.5/update()"},{"label":"getIn()","url":"/docs/v4.3.5/getIn()"},{"label":"hasIn()","url":"/docs/v4.3.5/hasIn()"},{"label":"removeIn()","url":"/docs/v4.3.5/removeIn()"},{"label":"setIn()","url":"/docs/v4.3.5/setIn()"},{"label":"updateIn()","url":"/docs/v4.3.5/updateIn()"},{"label":"merge()","url":"/docs/v4.3.5/merge()"},{"label":"mergeWith()","url":"/docs/v4.3.5/mergeWith()"},{"label":"mergeDeep()","url":"/docs/v4.3.5/mergeDeep()"},{"label":"mergeDeepWith()","url":"/docs/v4.3.5/mergeDeepWith()"}]}],["$","div","Overview",{"className":"docContents","children":[["$","$L6",null,{}],["$","h1",null,{"children":["Immutable.js (","v4.3.5",")"]}],["$","div",null,{"children":[["$","section",null,{"children":[["$","$L7",null,{"contents":"<p>Immutable data encourages pure functions (data-in, data-out) and lends itself\nto much simpler application development and enabling techniques from\nfunctional programming such as lazy evaluation.</p>\n"}],["$","$L7",null,{"contents":"$8"}]]}],["$","h4",null,{"className":"groupTitle","children":"API"}],[["$","section","/docs/v4.3.5/List",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/List","children":"List"}]}],["$","$L7",null,{"className":"detail","contents":"<p>Lists are ordered indexed dense collections, much like a JavaScript\nArray.</p>\n"}]]}],["$","section","/docs/v4.3.5/Map",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/Map","children":"Map"}]}],["$","$L7",null,{"className":"detail","contents":"<p>Immutable Map is an unordered Collection.Keyed of (key, value) pairs with\n<code>O<span class=\"token punctuation\" >(</span>log32 N<span class=\"token punctuation\" >)</span></code> gets and <code>O<span class=\"token punctuation\" >(</span>log32 N<span class=\"token punctuation\" >)</span></code> persistent sets.</p>\n"}]]}],["$","section","/docs/v4.3.5/OrderedMap",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/OrderedMap","children":"OrderedMap"}]}],["$","$L7",null,{"className":"detail","contents":"<p>A type of Map that has the additional guarantee that the iteration order of\nentries will be the order in which they were set().</p>\n"}]]}],["$","section","/docs/v4.3.5/Set",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/Set","children":"Set"}]}],["$","$L7",null,{"className":"detail","contents":"<p>A Collection of unique values with <code>O<span class=\"token punctuation\" >(</span>log32 N<span class=\"token punctuation\" >)</span></code> adds and has.</p>\n"}]]}],["$","section","/docs/v4.3.5/OrderedSet",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/OrderedSet","children":"OrderedSet"}]}],["$","$L7",null,{"className":"detail","contents":"<p>A type of Set that has the additional guarantee that the iteration order of\nvalues will be the order in which they were <code><a href=\"/docs/v4.3.5/OrderedSet#add()\">add</a></code>ed.</p>\n"}]]}],["$","section","/docs/v4.3.5/Stack",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/Stack","children":"Stack"}]}],["$","$L7",null,{"className":"detail","contents":"<p>Stacks are indexed collections which support very efficient O(1) addition\nand removal from the front using <code><a href=\"/docs/v4.3.5/Stack#unshift()\">unshift(v)</a></code> and <code><a href=\"/docs/v4.3.5/Stack#shift()\">shift()</a></code>.</p>\n"}]]}],["$","section","/docs/v4.3.5/Range()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/Range()","children":"Range()"}]}],["$","$L7",null,{"className":"detail","contents":"<p>Returns a Seq.Indexed of numbers from <code><span class=\"t param\">start</span></code> (inclusive) to <code><span class=\"t param\">end</span></code>\n(exclusive), by <code><span class=\"t param\">step</span></code>, where <code><span class=\"t param\">start</span></code> defaults to 0, <code><span class=\"t param\">step</span></code> to 1, and <code><span class=\"t param\">end</span></code> to\ninfinity. When <code><span class=\"t param\">start</span></code> is equal to <code><span class=\"t param\">end</span></code>, returns empty range.</p>\n"}]]}],["$","section","/docs/v4.3.5/Repeat()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/Repeat()","children":"Repeat()"}]}],["$","$L7",null,{"className":"detail","contents":"<p>Returns a Seq.Indexed of <code><span class=\"t param\">value</span></code> repeated <code><span class=\"t param\">times</span></code> times. When <code><span class=\"t param\">times</span></code> is\nnot defined, returns an infinite <code><a href=\"/docs/v4.3.5/Seq\">Seq</a></code> of <code><span class=\"t param\">value</span></code>.</p>\n"}]]}],["$","section","/docs/v4.3.5/Record",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/Record","children":"Record"}]}],["$","$L7",null,{"className":"detail","contents":"<p>A record is similar to a JS object, but enforces a specific set of allowed\nstring keys, and has default values.</p>\n"}]]}],["$","section","/docs/v4.3.5/Record.Factory",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/Record.Factory","children":"Record.Factory"}]}],["$","$L7",null,{"className":"detail","contents":"<p>A Record.Factory is created by the <code><a href=\"/docs/v4.3.5/Record\">Record()</a></code> function. Record instances\nare created by passing it some of the accepted values for that Record\ntype:</p>\n"}]]}],["$","section","/docs/v4.3.5/Seq",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/Seq","children":"Seq"}]}],["$","$L7",null,{"className":"detail","contents":"<p><code><a href=\"/docs/v4.3.5/Seq\">Seq</a></code> describes a lazy operation, allowing them to efficiently chain\nuse of all the higher-order collection methods (such as <code><a href=\"/docs/v4.3.5/Seq#map()\">map</a></code> and <code><a href=\"/docs/v4.3.5/Seq#filter()\">filter</a></code>)\nby not creating intermediate collections.</p>\n"}]]}],["$","section","/docs/v4.3.5/Seq.Keyed",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/Seq.Keyed","children":"Seq.Keyed"}]}],["$","$L7",null,{"className":"detail","contents":"<p><code><a href=\"/docs/v4.3.5/Seq\">Seq</a></code> which represents key-value pairs.</p>\n"}]]}],["$","section","/docs/v4.3.5/Seq.Indexed",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/Seq.Indexed","children":"Seq.Indexed"}]}],["$","$L7",null,{"className":"detail","contents":"<p><code><a href=\"/docs/v4.3.5/Seq\">Seq</a></code> which represents an ordered indexed list of values.</p>\n"}]]}],["$","section","/docs/v4.3.5/Seq.Set",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/Seq.Set","children":"Seq.Set"}]}],["$","$L7",null,{"className":"detail","contents":"<p><code><a href=\"/docs/v4.3.5/Seq\">Seq</a></code> which represents a set of values.</p>\n"}]]}],["$","section","/docs/v4.3.5/Collection",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/Collection","children":"Collection"}]}],["$","$L7",null,{"className":"detail","contents":"<p>The <code><a href=\"/docs/v4.3.5/Collection\">Collection</a></code> is a set of (key, value) entries which can be iterated, and\nis the base class for all collections in <code>immutable</code>, allowing them to\nmake use of all the Collection methods (such as <code><a href=\"/docs/v4.3.5/Collection#map()\">map</a></code> and <code><a href=\"/docs/v4.3.5/Collection#filter()\">filter</a></code>).</p>\n"}]]}],["$","section","/docs/v4.3.5/Collection.Keyed",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/Collection.Keyed","children":"Collection.Keyed"}]}],["$","$L7",null,{"className":"detail","contents":"<p>Keyed Collections have discrete keys tied to each value.</p>\n"}]]}],["$","section","/docs/v4.3.5/Collection.Indexed",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/Collection.Indexed","children":"Collection.Indexed"}]}],["$","$L7",null,{"className":"detail","contents":"<p>Indexed Collections have incrementing numeric keys. They exhibit\nslightly different behavior than <code><a href=\"/docs/v4.3.5/Collection.Keyed\">Collection.Keyed</a></code> for some methods in order\nto better mirror the behavior of JavaScript&#39;s <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">Array</a></code>, and add methods\nwhich do not make sense on non-indexed Collections such as <code><a href=\"/docs/v4.3.5/Collection.Indexed#indexOf()\">indexOf</a></code>.</p>\n"}]]}],["$","section","/docs/v4.3.5/Collection.Set",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/Collection.Set","children":"Collection.Set"}]}],["$","$L7",null,{"className":"detail","contents":"<p>Set Collections only represent values. They have no associated keys or\nindices. Duplicate values are possible in the lazy <code><a href=\"/docs/v4.3.5/Seq.Set\">Seq.Set</a></code>s, however\nthe concrete <code><a href=\"/docs/v4.3.5/Set\">Set</a></code> Collection does not allow duplicate values.</p>\n"}]]}],["$","section","/docs/v4.3.5/ValueObject",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/ValueObject","children":"ValueObject"}]}],"$undefined"]}],["$","section","/docs/v4.3.5/fromJS()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/fromJS()","children":"fromJS()"}]}],"$undefined"]}],["$","section","/docs/v4.3.5/is()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/is()","children":"is()"}]}],["$","$L7",null,{"className":"detail","contents":"<p>Value equality check with semantics similar to <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is\" target=\"_blank\" rel=\"noopener\">Object.is</a></code>, but treats\nImmutable <code><a href=\"/docs/v4.3.5/Collection\">Collection</a></code>s as values, equal if the second <code><a href=\"/docs/v4.3.5/Collection\">Collection</a></code> includes\nequivalent values.</p>\n"}]]}],["$","section","/docs/v4.3.5/hash()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/hash()","children":"hash()"}]}],["$","$L7",null,{"className":"detail","contents":"<p>The <code><a href=\"/docs/v4.3.5/hash()\">hash()</a></code> function is an important part of how Immutable determines if\ntwo values are equivalent and is used to determine how to store those\nvalues. Provided with any value, <code><a href=\"/docs/v4.3.5/hash()\">hash()</a></code> will return a 31-bit integer.</p>\n"}]]}],["$","section","/docs/v4.3.5/isImmutable()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/isImmutable()","children":"isImmutable()"}]}],["$","$L7",null,{"className":"detail","contents":"<p>True if <code><span class=\"t param\">maybeImmutable</span></code> is an Immutable Collection or Record.</p>\n"}]]}],["$","section","/docs/v4.3.5/isCollection()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/isCollection()","children":"isCollection()"}]}],["$","$L7",null,{"className":"detail","contents":"<p>True if <code><span class=\"t param\">maybeCollection</span></code> is a Collection, or any of its subclasses.</p>\n"}]]}],["$","section","/docs/v4.3.5/isKeyed()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/isKeyed()","children":"isKeyed()"}]}],["$","$L7",null,{"className":"detail","contents":"<p>True if <code><span class=\"t param\">maybeKeyed</span></code> is a Collection.Keyed, or any of its subclasses.</p>\n"}]]}],["$","section","/docs/v4.3.5/isIndexed()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/isIndexed()","children":"isIndexed()"}]}],["$","$L7",null,{"className":"detail","contents":"<p>True if <code><span class=\"t param\">maybeIndexed</span></code> is a Collection.Indexed, or any of its subclasses.</p>\n"}]]}],["$","section","/docs/v4.3.5/isAssociative()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/isAssociative()","children":"isAssociative()"}]}],["$","$L7",null,{"className":"detail","contents":"<p>True if <code><span class=\"t param\">maybeAssociative</span></code> is either a Keyed or Indexed Collection.</p>\n"}]]}],["$","section","/docs/v4.3.5/isOrdered()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/isOrdered()","children":"isOrdered()"}]}],["$","$L7",null,{"className":"detail","contents":"<p>True if <code><span class=\"t param\">maybeOrdered</span></code> is a Collection where iteration order is well\ndefined. True for Collection.Indexed as well as OrderedMap and OrderedSet.</p>\n"}]]}],["$","section","/docs/v4.3.5/isValueObject()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/isValueObject()","children":"isValueObject()"}]}],["$","$L7",null,{"className":"detail","contents":"<p>True if <code><span class=\"t param\">maybeValue</span></code> is a JavaScript Object which has <em>both</em> <code>equals<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code>\nand <code>hashCode<span class=\"token punctuation\" >(</span><span class=\"token punctuation\" >)</span></code> methods.</p>\n"}]]}],["$","section","/docs/v4.3.5/isSeq()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/isSeq()","children":"isSeq()"}]}],["$","$L7",null,{"className":"detail","contents":"<p>True if <code><span class=\"t param\">maybeSeq</span></code> is a Seq.</p>\n"}]]}],["$","section","/docs/v4.3.5/isList()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/isList()","children":"isList()"}]}],["$","$L7",null,{"className":"detail","contents":"<p>True if <code><span class=\"t param\">maybeList</span></code> is a List.</p>\n"}]]}],["$","section","/docs/v4.3.5/isMap()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/isMap()","children":"isMap()"}]}],["$","$L7",null,{"className":"detail","contents":"<p>True if <code><span class=\"t param\">maybeMap</span></code> is a Map.</p>\n"}]]}],["$","section","/docs/v4.3.5/isOrderedMap()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/isOrderedMap()","children":"isOrderedMap()"}]}],["$","$L7",null,{"className":"detail","contents":"<p>True if <code><span class=\"t param\">maybeOrderedMap</span></code> is an OrderedMap.</p>\n"}]]}],["$","section","/docs/v4.3.5/isStack()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/isStack()","children":"isStack()"}]}],["$","$L7",null,{"className":"detail","contents":"<p>True if <code><span class=\"t param\">maybeStack</span></code> is a Stack.</p>\n"}]]}],["$","section","/docs/v4.3.5/isSet()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/isSet()","children":"isSet()"}]}],["$","$L7",null,{"className":"detail","contents":"<p>True if <code><span class=\"t param\">maybeSet</span></code> is a Set.</p>\n"}]]}],["$","section","/docs/v4.3.5/isOrderedSet()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/isOrderedSet()","children":"isOrderedSet()"}]}],["$","$L7",null,{"className":"detail","contents":"<p>True if <code><span class=\"t param\">maybeOrderedSet</span></code> is an OrderedSet.</p>\n"}]]}],["$","section","/docs/v4.3.5/isRecord()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/isRecord()","children":"isRecord()"}]}],["$","$L7",null,{"className":"detail","contents":"<p>True if <code><span class=\"t param\">maybeRecord</span></code> is a Record.</p>\n"}]]}],["$","section","/docs/v4.3.5/get()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/get()","children":"get()"}]}],"$undefined"]}],["$","section","/docs/v4.3.5/has()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/has()","children":"has()"}]}],["$","$L7",null,{"className":"detail","contents":"<p>Returns true if the key is defined in the provided collection.</p>\n"}]]}],["$","section","/docs/v4.3.5/remove()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/remove()","children":"remove()"}]}],"$undefined"]}],["$","section","/docs/v4.3.5/set()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/set()","children":"set()"}]}],"$undefined"]}],["$","section","/docs/v4.3.5/update()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/update()","children":"update()"}]}],"$undefined"]}],["$","section","/docs/v4.3.5/getIn()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/getIn()","children":"getIn()"}]}],["$","$L7",null,{"className":"detail","contents":"<p>Returns the value at the provided key path starting at the provided\ncollection, or notSetValue if the key path is not defined.</p>\n"}]]}],["$","section","/docs/v4.3.5/hasIn()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/hasIn()","children":"hasIn()"}]}],["$","$L7",null,{"className":"detail","contents":"<p>Returns true if the key path is defined in the provided collection.</p>\n"}]]}],["$","section","/docs/v4.3.5/removeIn()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/removeIn()","children":"removeIn()"}]}],["$","$L7",null,{"className":"detail","contents":"<p>Returns a copy of the collection with the value at the key path removed.</p>\n"}]]}],["$","section","/docs/v4.3.5/setIn()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/setIn()","children":"setIn()"}]}],["$","$L7",null,{"className":"detail","contents":"<p>Returns a copy of the collection with the value at the key path set to the\nprovided value.</p>\n"}]]}],["$","section","/docs/v4.3.5/updateIn()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/updateIn()","children":"updateIn()"}]}],"$undefined"]}],["$","section","/docs/v4.3.5/merge()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/merge()","children":"merge()"}]}],["$","$L7",null,{"className":"detail","contents":"<p>Returns a copy of the collection with the remaining collections merged in.</p>\n"}]]}],["$","section","/docs/v4.3.5/mergeWith()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/mergeWith()","children":"mergeWith()"}]}],["$","$L7",null,{"className":"detail","contents":"<p>Returns a copy of the collection with the remaining collections merged in,\ncalling the <code><span class=\"t param\">merger</span></code> function whenever an existing value is encountered.</p>\n"}]]}],["$","section","/docs/v4.3.5/mergeDeep()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/mergeDeep()","children":"mergeDeep()"}]}],["$","$L7",null,{"className":"detail","contents":"<p>Like <code><a href=\"/docs/v4.3.5/merge()\">merge()</a></code>, but when two compatible collections are encountered with\nthe same key, it merges them as well, recursing deeply through the nested\ndata. Two collections are considered to be compatible (and thus will be\nmerged together) if they both fall into one of three categories: keyed\n(e.g., <code><a href=\"/docs/v4.3.5/Map\">Map</a></code>s, <code><a href=\"/docs/v4.3.5/Record\">Record</a></code>s, and objects), indexed (e.g., <code><a href=\"/docs/v4.3.5/List\">List</a></code>s and\narrays), or set-like (e.g., <code><a href=\"/docs/v4.3.5/Set\">Set</a></code>s). If they fall into separate\ncategories, <code><a href=\"/docs/v4.3.5/mergeDeep()\">mergeDeep</a></code> will replace the existing collection with the\ncollection being merged in. This behavior can be customized by using\n<code><a href=\"/docs/v4.3.5/mergeDeepWith()\">mergeDeepWith()</a></code>.</p>\n"}]]}],["$","section","/docs/v4.3.5/mergeDeepWith()",{"className":"interfaceMember","children":[["$","h3",null,{"className":"memberLabel","children":["$","$L9",null,{"href":"/docs/v4.3.5/mergeDeepWith()","children":"mergeDeepWith()"}]}],["$","$L7",null,{"className":"detail","contents":"<p>Like <code><a href=\"/docs/v4.3.5/mergeDeep()\">mergeDeep()</a></code>, but when two non-collections or incompatible\ncollections are encountered at the same key, it uses the <code><span class=\"t param\">merger</span></code> function\nto determine the resulting value. Collections are considered incompatible\nif they fall into separate categories between keyed, indexed, and set-like.</p>\n"}]]}]]]}]]}]]}]}]]}],null]]},["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children","$b","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lc",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lc",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined","styles":null}]]},[null,["$","html",null,{"lang":"en","children":["$","body",null,{"children":["$","$La",null,{"parallelRouterKey":"children","segmentPath":["children"],"loading":"$undefined","loadingStyles":"$undefined","loadingScripts":"$undefined","hasLoading":false,"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$Lc",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[],"styles":null}]}]}],null]],[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/f4479af2108893f8.css","precedence":"next","crossOrigin":""}]],"$Ld"]]]]
d:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Documentation v4.3.5 — Immutable.js"}],["$","link","3",{"rel":"icon","href":"/favicon.png"}]]
1:null
