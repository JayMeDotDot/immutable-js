2:I[1109,["542","static/chunks/542-c924920cb7790e4a.js","609","static/chunks/app/docs/%5Bversion%5D/%5Btype%5D/page-2c83b84bf9518feb.js"],"TypeDocumentation"]
1a:I[1742,[],""]
1d:I[9121,[],""]
1e:I[5354,["542","static/chunks/542-c924920cb7790e4a.js","685","static/chunks/685-a9c0c7003392b7e4.js","886","static/chunks/886-31117cd24491e23b.js","356","static/chunks/app/docs/%5Bversion%5D/layout-e2b13303ce5dc2cf.js"],"ImmutableConsole"]
1f:I[7626,["542","static/chunks/542-c924920cb7790e4a.js","685","static/chunks/685-a9c0c7003392b7e4.js","886","static/chunks/886-31117cd24491e23b.js","356","static/chunks/app/docs/%5Bversion%5D/layout-e2b13303ce5dc2cf.js"],"HeaderLogoLink"]
20:I[7626,["542","static/chunks/542-c924920cb7790e4a.js","685","static/chunks/685-a9c0c7003392b7e4.js","886","static/chunks/886-31117cd24491e23b.js","356","static/chunks/app/docs/%5Bversion%5D/layout-e2b13303ce5dc2cf.js"],"HeaderLinks"]
3:T52a,<code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Seq</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token qualifier">Seq</span><span class="token punctuation">.</span><span class="token function">Indexed</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> <span class="token number">10</span> <span class="token operator">*</span> x<span class="token punctuation">)</span>
<span class="token comment">// Seq [ 10, 20 ]</span></code><p>Note: <code><a href="/docs/v5.1.1/Seq.Indexed#map()">map()</a></code> always returns a new instance, even if it produced the
same value at every step.</p>
4:Tbb4,<p><code class="codeBlock"><span class="token keyword">var</span> squares <span class="token operator">=</span> <span class="token function">Seq</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator"><em></span> x<span class="token punctuation">)</span>
squares<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> squares<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code><p>If you know a <code><a href="/docs/v5.1.1/Seq">Seq</a></code> will be used multiple times, it may be more
efficient to first cache it in memory. Here, the map function is called
only 3 times.</p>
<code class="codeBlock"><span class="token keyword">var</span> squares <span class="token operator">=</span> <span class="token function">Seq</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator"></em></span> x<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cacheResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
squares<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> squares<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code><p>Use this method judiciously, as it must fully evaluate a Seq which can be
a burden on memory and possibly performance.</p></p>
<p>Note: after calling <code><a href="/docs/v5.1.1/Seq#cacheResult()">cacheResult</a></code>, a Seq will always have a <code><a href="/docs/v5.1.1/Seq#size">size</a></code>.</p>
5:Tc00,<p>The <code><a href="/docs/v5.1.1/List#hashCode()">hashCode</a></code> of a Collection is used to determine potential equality,
and is used when adding this to a <code><a href="/docs/v5.1.1/Set">Set</a></code> or as a key in a <code><a href="/docs/v5.1.1/Map">Map</a></code>, enabling
lookup via a different instance.</p>
<!-- runkit:activate
     { "preamble": "const { Set,  List } = require('immutable')" }
-->
<code class="codeBlock"><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
assert<span class="token punctuation">.</span><span class="token function">notStrictEqual</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// different instances</span>
<span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token function">Set</span><span class="token punctuation">(</span><span class="token punctuation">[</span> a <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
assert<span class="token punctuation">.</span><span class="token function">equal</span><span class="token punctuation">(</span>set<span class="token punctuation">.</span><span class="token function">has</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token primitive">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><a class="try-it" data-options="%7B%22preamble%22%3A%22const%20%7B%20Set%2C%20%20List%20%7D%20%3D%20require%28%27immutable%27%29%22%7D" onClick="runIt(this,'v5.1.1')">run it</a></code><p>If two values have the same <code><a href="/docs/v5.1.1/List#hashCode()">hashCode</a></code>, they are <a href="https://en.wikipedia.org/wiki/Collision_(computer_science)">not guaranteed
to be equal</a>. If two values have different <code><a href="/docs/v5.1.1/List#hashCode()">hashCode</a></code>s,
they must not be equal.</p>
6:{"k":6}
7:{"k":11,"param":"T"}
8:Tf7b,<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span><span class="token punctuation">,</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> deepData <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
deepData<span class="token punctuation">.</span><span class="token function">getIn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 123</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'v5.1.1')">run it</a></code><p>Plain JavaScript Object or Arrays may be nested within an Immutable.js
Collection, and getIn() can access those values as well:</p></p>
<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span><span class="token punctuation">,</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> deepData <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token punctuation">[</span> <span class="token punctuation">{</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">123</span> <span class="token punctuation">}</span> <span class="token punctuation">]</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
deepData<span class="token punctuation">.</span><span class="token function">getIn</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">// 123</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'v5.1.1')">run it</a></code></p>
9:Tab1,<p>For example, to sum a Seq after mapping and filtering:</p>
<!-- runkit:activate -->
<code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Seq</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>

<p><span class="token block-keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token parameter">collection</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> collection<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">sum<span class="token punctuation">,</span> x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> sum <span class="token operator">+</span> x<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span></p>
<p><span class="token function">Seq</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span>
<span class="token comment">// 6</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'v5.1.1')">run it</a></code></p>
a:T89d,<p>This is similar to <code><a href="/docs/v5.1.1/List">List(collection)</a></code>, but provided to allow for chained
expressions. However, when called on <code><a href="/docs/v5.1.1/Map">Map</a></code> or other keyed collections,
<code>collection<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> discards the keys and creates a list of only the
values, whereas <code><a href="/docs/v5.1.1/List">List(collection)</a></code> creates a list of entry tuples.</p>
<!-- runkit:activate -->
<code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span><span class="token punctuation">,</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token keyword">var</span> myMap <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token string">'Apple'</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token string">'Banana'</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token function">List</span><span class="token punctuation">(</span>myMap<span class="token punctuation">)</span> <span class="token comment">// List [ [ "a", "Apple" ], [ "b", "Banana" ] ]</span>
myMap<span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// List [ "Apple", "Banana" ]</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'v5.1.1')">run it</a></code>b:T920,<p>This is useful if you want to operate on an
Collection.Indexed and preserve the [index, value] pairs.</p>
<p>The returned Seq will have identical iteration order as
this Collection.</p>
<!-- runkit:activate -->
<code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Seq</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> indexedSeq <span class="token operator">=</span> <span class="token function">Seq</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token comment">// Seq [ "A", "B", "C" ]</span>
indexedSeq<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">===</span> <span class="token string">'B'</span><span class="token punctuation">)</span>
<span class="token comment">// Seq [ "B" ]</span>
<span class="token keyword">const</span> keyedSeq <span class="token operator">=</span> indexedSeq<span class="token punctuation">.</span><span class="token function">toKeyedSeq</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">// Seq { 0: "A", 1: "B", 2: "C" }</span>
keyedSeq<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=></span> v <span class="token operator">===</span> <span class="token string">'B'</span><span class="token punctuation">)</span>
<span class="token comment">// Seq { 1: "B" }</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'v5.1.1')">run it</a></code>c:T7ae,<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">d</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">filterNot</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span>
<span class="token comment">// Map { "a": 1, "c": 3 }</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'v5.1.1')">run it</a></code><p>Note: <code><a href="/docs/v5.1.1/List#filterNot()">filterNot()</a></code> always returns a new instance, even if it results in
not filtering out any values.</p></p>
d:T118a,<p>If a <code><span class="t param">comparator</span></code> is not provided, a default comparator uses <code><span class="token operator">&lt;</span></code> and <code><span class="token operator">></span></code>.</p>
<p><code><span class="token function">comparator</span><span class="token punctuation">(</span>valueA<span class="token punctuation">,</span> valueB<span class="token punctuation">)</span></code>:</p>
<ul>
<li>Returns <code><span class="token number">0</span></code> if the elements should not be swapped.</li>
<li>Returns <code><span class="token operator">-</span><span class="token number">1</span></code> (or any negative number) if <code>valueA</code> comes before <code>valueB</code></li>
<li>Returns <code><span class="token number">1</span></code> (or any positive number) if <code>valueA</code> comes after <code>valueB</code></li>
<li>Alternatively, can return a value of the <code><span class="token qualifier">Pair</span><span class="token qualifier">Sorting</span></code> enum type</li>
<li>Is pure, i.e. it must always return the same value for the same pair
of values.</li>
</ul>
<p>When sorting collections which have no defined order, their ordered
equivalents will be returned. e.g. <code>map<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code> returns OrderedMap.</p>
<!-- runkit:activate -->
<code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string-property property">"c"</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string-property property">"a"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string-property property">"b"</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">{</span>
  <span class="token block-keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token block-keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
  <span class="token block-keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">===</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// OrderedMap { "a": 1, "b": 2, "c": 3 }</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'v5.1.1')">run it</a></code><p>Note: <code><a href="/docs/v5.1.1/List#sort()">sort()</a></code> Always returns a new instance, even if the original was
already sorted.</p>
<p>Note: This is always an eager operation.</p>
e:Tac2,<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> beattles <span class="token operator">=</span> <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
  <span class="token qualifier">John</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Lennon"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token qualifier">Paul</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"McCartney"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token qualifier">George</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Harrison"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token qualifier">Ringo</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">"Starr"</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
beattles<span class="token punctuation">.</span><span class="token function">sortBy</span><span class="token punctuation">(</span><span class="token parameter">member</span> <span class="token operator">=></span> member<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'v5.1.1')">run it</a></code><p>Note: <code><a href="/docs/v5.1.1/List#sortBy()">sortBy()</a></code> Always returns a new instance, even if the original was
already sorted.</p></p>
<p>Note: This is always an eager operation.</p>
f:Te12,<p>Note: This is always an eager operation.</p>
<!-- runkit:activate -->
<code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">List</span><span class="token punctuation">,</span> <span class="token qualifier">Map</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> listOfMaps <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">v</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">v</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">v</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">v</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">Map</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token literal-property property">v</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> groupsOfMaps <span class="token operator">=</span> listOfMaps<span class="token punctuation">.</span><span class="token function">groupBy</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'v'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// Map {</span>
<span class="token comment">//   0: List [ Map{ "v": 0 }, Map { "v": 0 } ],</span>
<span class="token comment">//   1: List [ Map{ "v": 1 }, Map { "v": 1 } ],</span>
<span class="token comment">//   2: List [ Map{ "v": 2 } ],</span>
<span class="token comment">// }</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'v5.1.1')">run it</a></code>10:T403,<p>If begin is negative, it is offset from the end of the Collection. e.g.
<code><span class="token function">slice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span></code> returns a Collection of the last two entries. If it is not
provided the new Collection will begin at the beginning of this Collection.</p>
<p>If end is negative, it is offset from the end of the Collection. e.g.
<code><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span></code> returns a Collection of everything but the last entry. If
it is not provided, the new Collection will continue through the end of
this Collection.</p>
<p>If the requested slice is equivalent to the current Collection, then it
will return itself.</p>
11:T6c3,<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'frog'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'hat'</span><span class="token punctuation">,</span> <span class="token string">'god'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">skipWhile</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">g</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// List [ "cat", "hat", "god" ]</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'v5.1.1')">run it</a></code></p>
12:T6be,<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'frog'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'hat'</span><span class="token punctuation">,</span> <span class="token string">'god'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">skipUntil</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">hat</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// List [ "hat", "god" ]</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'v5.1.1')">run it</a></code></p>
13:T6bd,<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'frog'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'hat'</span><span class="token punctuation">,</span> <span class="token string">'god'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">takeWhile</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">o</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// List [ "dog", "frog" ]</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'v5.1.1')">run it</a></code></p>
14:T6be,<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">'dog'</span><span class="token punctuation">,</span> <span class="token string">'frog'</span><span class="token punctuation">,</span> <span class="token string">'cat'</span><span class="token punctuation">,</span> <span class="token string">'hat'</span><span class="token punctuation">,</span> <span class="token string">'god'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
  <span class="token punctuation">.</span><span class="token function">takeUntil</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=></span> x<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">at</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// List [ "dog", "frog" ]</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'v5.1.1')">run it</a></code></p>
15:Ta3e,<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">List</span><span class="token punctuation">,</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> l <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token literal-property property">avgHit</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Max'</span><span class="token punctuation">,</span> <span class="token literal-property property">avgHit</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Lili'</span><span class="token punctuation">,</span> <span class="token literal-property property">avgHit</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
l<span class="token punctuation">.</span><span class="token function">maxBy</span><span class="token punctuation">(</span><span class="token parameter">i</span> <span class="token operator">=></span> i<span class="token punctuation">.</span>avgHit<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// will output { name: 'Max', avgHit: 3 }</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'v5.1.1')">run it</a></code></p>
16:Ta3e,<!-- runkit:activate -->
<p><code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">List</span><span class="token punctuation">,</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> l <span class="token operator">=</span> <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Bob'</span><span class="token punctuation">,</span> <span class="token literal-property property">avgHit</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Max'</span><span class="token punctuation">,</span> <span class="token literal-property property">avgHit</span><span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token punctuation">{</span> <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'Lili'</span><span class="token punctuation">,</span> <span class="token literal-property property">avgHit</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span> <span class="token punctuation">,</span>
<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
l<span class="token punctuation">.</span><span class="token function">minBy</span><span class="token punctuation">(</span><span class="token parameter">i</span> <span class="token operator">=></span> i<span class="token punctuation">.</span>avgHit<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// will output { name: 'Bob', avgHit: 1 }</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'v5.1.1')">run it</a></code></p>
17:Tf6a,<p>The resulting Collection includes the first item from each, then the
second from each, etc.</p>
<!-- runkit:activate
     { "preamble": "require('immutable')"}
-->
<code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interleave</span><span class="token punctuation">(</span><span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// List [ 1, "A", 2, "B", 3, "C" ]</span><a class="try-it" data-options="%7B%22preamble%22%3A%22require%28%27immutable%27%29%22%7D" onClick="runIt(this,'v5.1.1')">run it</a></code><p>The shortest Collection stops interleave.</p>
<!-- runkit:activate
     { "preamble": "const { List } = require('immutable')" }
-->
<code class="codeBlock"><span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">interleave</span><span class="token punctuation">(</span>
  <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">'X'</span><span class="token punctuation">,</span> <span class="token string">'Y'</span><span class="token punctuation">,</span> <span class="token string">'Z'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span>
<span class="token comment">// List [ 1, "A", "X", 2, "B", "Y" ]</span><a class="try-it" data-options="%7B%22preamble%22%3A%22const%20%7B%20List%20%7D%20%3D%20require%28%27immutable%27%29%22%7D" onClick="runIt(this,'v5.1.1')">run it</a></code><p>Since <code><a href="/docs/v5.1.1/List#interleave()">interleave()</a></code> re-indexes values, it produces a complete copy,
which has <code><span class="token constant">O</span><span class="token punctuation">(</span><span class="token constant">N</span><span class="token punctuation">)</span></code> complexity.</p>
<p>Note: <code><a href="/docs/v5.1.1/List#interleave()">interleave</a></code> <em>cannot</em> be used in <code><a href="/docs/v5.1.1/List#withMutations()">withMutations</a></code>.</p>
18:{"k":11,"param":"T"}
19:T9a7,<p><code><span class="t param">index</span></code> may be a negative number, which indexes back from the end of the
Collection. <code>s<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span></code> splices after the second to last item.</p>
<!-- runkit:activate -->
<code class="codeBlock"><span class="token keyword">const</span> <span class="token punctuation">{</span> <span class="token qualifier">List</span> <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'immutable'</span><span class="token punctuation">)</span>
<span class="token function">List</span><span class="token punctuation">(</span><span class="token punctuation">[</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'q'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> <span class="token string">'s'</span><span class="token punctuation">)</span>
<span class="token comment">// List [ "a", "q", "r", "s", "d" ]</span><a class="try-it" data-options="%7B%7D" onClick="runIt(this,'v5.1.1')">run it</a></code><p>Since <code><a href="/docs/v5.1.1/List#splice()">splice()</a></code> re-indexes values, it produces a complete copy, which
has <code><span class="token constant">O</span><span class="token punctuation">(</span><span class="token constant">N</span><span class="token punctuation">)</span></code> complexity.</p>
<p>Note: <code><a href="/docs/v5.1.1/List#splice()">splice</a></code> <em>cannot</em> be used in <code><a href="/docs/v5.1.1/List#withMutations()">withMutations</a></code>.</p>
1b:["version","v5.1.1","d"]
1c:["type","Seq.Indexed","d"]
0:["vmQ7bSnCOeLPyK3r7Yd_v",[[["",{"children":["docs",{"children":[["version","v5.1.1","d"],{"children":[["type","Seq.Indexed","d"],{"children":["__PAGE__?{\"version\":\"v5.1.1\",\"type\":\"Seq.Indexed\"}",{}]}]}]}]},"$undefined","$undefined",true],["",{"children":["docs",{"children":[["version","v5.1.1","d"],{"children":[["type","Seq.Indexed","d"],{"children":["__PAGE__",{},[["$L1",["$","$L2",null,{"def":{"qualifiedName":"Seq.Indexed","doc":{"synopsis":"<p><code><a href=\"/docs/v5.1.1/Seq\">Seq</a></code> which represents an ordered indexed list of values.</p>\n","description":"","notes":[]},"functions":{"of":{"name":"Seq.Indexed.of","label":"Seq.Indexed.of()","id":"of()","isStatic":true,"signatures":[{"line":3279,"typeParams":["T"],"params":[{"name":"values","type":{"k":12,"name":"Array","args":[{"k":11,"param":"T"}]},"varArgs":true}],"type":{"k":12,"name":"Seq.Indexed","args":[{"k":11,"param":"T"}],"url":"/docs/v5.1.1/Seq.Indexed"}}],"url":"/docs/v5.1.1/Seq.Indexed#of()"}},"call":{"name":"Seq.Indexed","label":"Seq.Indexed()","id":"Seq.Indexed()","doc":{"synopsis":"<p>Always returns Seq.Indexed, discarding associated keys and\nsupplying incrementing indices.</p>\n","description":"<p>Note: <code><a href=\"/docs/v5.1.1/Seq.Indexed\">Seq.Indexed</a></code> is a conversion function and not a class, and does\nnot use the <code><span class=\"token keyword\">new</span></code> keyword during construction.</p>\n","notes":[]},"signatures":[{"line":3289,"typeParams":["T"],"params":[{"name":"collection","type":{"k":13,"types":[{"k":12,"name":"Iterable","args":[{"k":11,"param":"T"}]},{"k":12,"name":"ArrayLike","args":[{"k":11,"param":"T"}]}]},"optional":true}],"type":{"k":12,"name":"Seq.Indexed","args":[{"k":11,"param":"T"}],"url":"/docs/v5.1.1/Seq.Indexed"}}],"url":"/docs/v5.1.1/Seq.Indexed#Seq.Indexed()"},"interface":{"members":{"toJS":{"name":"toJS","label":"toJS()","id":"toJS()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Deeply converts this Indexed Seq to equivalent native JavaScript Array.</p>\n","description":"","notes":[]},"signatures":[{"line":3297,"type":{"k":12,"name":"Array","args":[{"k":12,"name":"DeepCopy","args":[{"k":11,"param":"T"}]}]}}],"url":"/docs/v5.1.1/Seq.Indexed#toJS()","overrides":{"interface":"Collection","label":"toJS()","url":"/docs/v5.1.1/Collection#toJS()"}},"toJSON":{"name":"toJSON","label":"toJSON()","id":"toJSON()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Shallowly converts this Indexed Seq to equivalent native JavaScript Array.</p>\n","description":"","notes":[]},"signatures":[{"line":3302,"type":{"k":12,"name":"Array","args":[{"k":11,"param":"T"}]}}],"url":"/docs/v5.1.1/Seq.Indexed#toJSON()","overrides":{"interface":"Collection","label":"toJSON()","url":"/docs/v5.1.1/Collection#toJSON()"}},"toArray":{"name":"toArray","label":"toArray()","id":"toArray()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Shallowly converts this collection to an Array.</p>\n","description":"","notes":[]},"signatures":[{"line":3307,"type":{"k":12,"name":"Array","args":[{"k":11,"param":"T"}]}}],"url":"/docs/v5.1.1/Seq.Indexed#toArray()","overrides":{"interface":"Collection","label":"toArray()","url":"/docs/v5.1.1/Collection#toArray()"}},"toSeq":{"name":"toSeq","label":"toSeq()","id":"toSeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>Returns itself</p>\n","description":"","notes":[]},"signatures":[{"line":3312,"type":{"k":3}}],"url":"/docs/v5.1.1/Seq.Indexed#toSeq()","overrides":{"interface":"Collection","label":"toSeq()","url":"/docs/v5.1.1/Collection#toSeq()"}},"concat":{"name":"concat","label":"concat()","id":"concat()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Seq with other collections concatenated to this one.</p>\n","description":"","notes":[]},"signatures":[{"line":3317,"typeParams":["C"],"params":[{"name":"valuesOrCollections","type":{"k":12,"name":"Array","args":[{"k":13,"types":[{"k":12,"name":"Iterable","args":[{"k":11,"param":"C"}]},{"k":11,"param":"C"}]}]},"varArgs":true}],"type":{"k":12,"name":"Seq.Indexed","args":[{"k":13,"types":[{"k":11,"param":"T"},{"k":11,"param":"C"}]}],"url":"/docs/v5.1.1/Seq.Indexed"}}],"url":"/docs/v5.1.1/Seq.Indexed#concat()","overrides":{"interface":"Seq","label":"concat()","url":"/docs/v5.1.1/Seq#concat()"}},"map":{"name":"map","label":"map()","id":"map()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Seq.Indexed with values passed through a\n<code><span class=\"t param\">mapper</span></code> function.</p>\n","description":"$3","notes":[]},"signatures":[{"line":3334,"typeParams":["M"],"params":[{"name":"mapper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":6}},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"M"}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":12,"name":"Seq.Indexed","args":[{"k":11,"param":"M"}],"url":"/docs/v5.1.1/Seq.Indexed"}}],"url":"/docs/v5.1.1/Seq.Indexed#map()","overrides":{"interface":"Seq","label":"map()","url":"/docs/v5.1.1/Seq#map()"}},"flatMap":{"name":"flatMap","label":"flatMap()","id":"flatMap()","group":"Sequence algorithms","doc":{"synopsis":"<p>Flat-maps the Seq, returning a a Seq of the same type.</p>\n","description":"<p>Similar to <code>seq<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token operator\">...</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">flatten</span><span class=\"token punctuation\">(</span><span class=\"token primitive\">true</span><span class=\"token punctuation\">)</span></code>.</p>\n","notes":[]},"signatures":[{"line":3344,"typeParams":["M"],"params":[{"name":"mapper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"key","type":{"k":6}},{"name":"iter","type":{"k":3}}],"type":{"k":12,"name":"Iterable","args":[{"k":11,"param":"M"}]}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":12,"name":"Seq.Indexed","args":[{"k":11,"param":"M"}],"url":"/docs/v5.1.1/Seq.Indexed"}}],"url":"/docs/v5.1.1/Seq.Indexed#flatMap()","overrides":{"interface":"Seq","label":"flatMap()","url":"/docs/v5.1.1/Seq#flatMap()"}},"filter":{"name":"filter","label":"filter()","id":"filter()","group":"Sequence algorithms","signatures":[{"line":3356,"typeParams":["F"],"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"index","type":{"k":6}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":12,"name":"Seq.Indexed","args":[{"k":11,"param":"F"}],"url":"/docs/v5.1.1/Seq.Indexed"}},{"line":3360,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"index","type":{"k":6}},{"name":"iter","type":{"k":3}}],"type":{"k":2}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":3}}],"url":"/docs/v5.1.1/Seq.Indexed#filter()","overrides":{"interface":"Seq","label":"filter()","url":"/docs/v5.1.1/Seq#filter()"}},"partition":{"name":"partition","label":"partition()","id":"partition()","group":"Sequence algorithms","signatures":[{"line":3369,"typeParams":["F","C"],"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"this","type":{"k":11,"param":"C"}},{"name":"value","type":{"k":11,"param":"T"}},{"name":"index","type":{"k":6}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":11,"param":"C"},"optional":true}],"type":{"k":15,"types":[{"k":12,"name":"Seq.Indexed","args":[{"k":11,"param":"T"}]},{"k":12,"name":"Seq.Indexed","args":[{"k":11,"param":"F"}]}]}},{"line":3373,"typeParams":["C"],"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"this","type":{"k":11,"param":"C"}},{"name":"value","type":{"k":11,"param":"T"}},{"name":"index","type":{"k":6}},{"name":"iter","type":{"k":3}}],"type":{"k":2}}},{"name":"context","type":{"k":11,"param":"C"},"optional":true}],"type":{"k":15,"types":[{"k":3},{"k":3}]}}],"url":"/docs/v5.1.1/Seq.Indexed#partition()","overrides":{"interface":"Seq","label":"partition()","url":"/docs/v5.1.1/Seq#partition()"}},"zip":{"name":"zip","label":"zip()","id":"zip()","group":"Combination","signatures":[{"line":3389,"typeParams":["U"],"params":[{"name":"other","type":{"k":12,"name":"Collection","args":[{"k":2},{"k":11,"param":"U"}],"url":"/docs/v5.1.1/Collection"}}],"type":{"k":12,"name":"Seq.Indexed","args":[{"k":15,"types":[{"k":11,"param":"T"},{"k":11,"param":"U"}]}],"url":"/docs/v5.1.1/Seq.Indexed"}},{"line":3390,"typeParams":["U","V"],"params":[{"name":"other","type":{"k":12,"name":"Collection","args":[{"k":2},{"k":11,"param":"U"}],"url":"/docs/v5.1.1/Collection"}},{"name":"other2","type":{"k":12,"name":"Collection","args":[{"k":2},{"k":11,"param":"V"}],"url":"/docs/v5.1.1/Collection"}}],"type":{"k":12,"name":"Seq.Indexed","args":[{"k":15,"types":[{"k":11,"param":"T"},{"k":11,"param":"U"},{"k":11,"param":"V"}]}],"url":"/docs/v5.1.1/Seq.Indexed"}},{"line":3394,"params":[{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":12,"name":"Collection","args":[{"k":2},{"k":2}]}]},"varArgs":true}],"type":{"k":12,"name":"Seq.Indexed","args":[{"k":2}],"url":"/docs/v5.1.1/Seq.Indexed"}}],"url":"/docs/v5.1.1/Seq.Indexed#zip()","overrides":{"interface":"Collection.Indexed","label":"zip()","url":"/docs/v5.1.1/Collection.Indexed#zip()"}},"zipAll":{"name":"zipAll","label":"zipAll()","id":"zipAll()","group":"Combination","signatures":[{"line":3410,"typeParams":["U"],"params":[{"name":"other","type":{"k":12,"name":"Collection","args":[{"k":2},{"k":11,"param":"U"}],"url":"/docs/v5.1.1/Collection"}}],"type":{"k":12,"name":"Seq.Indexed","args":[{"k":15,"types":[{"k":11,"param":"T"},{"k":11,"param":"U"}]}],"url":"/docs/v5.1.1/Seq.Indexed"}},{"line":3411,"typeParams":["U","V"],"params":[{"name":"other","type":{"k":12,"name":"Collection","args":[{"k":2},{"k":11,"param":"U"}],"url":"/docs/v5.1.1/Collection"}},{"name":"other2","type":{"k":12,"name":"Collection","args":[{"k":2},{"k":11,"param":"V"}],"url":"/docs/v5.1.1/Collection"}}],"type":{"k":12,"name":"Seq.Indexed","args":[{"k":15,"types":[{"k":11,"param":"T"},{"k":11,"param":"U"},{"k":11,"param":"V"}]}],"url":"/docs/v5.1.1/Seq.Indexed"}},{"line":3415,"params":[{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":12,"name":"Collection","args":[{"k":2},{"k":2}]}]},"varArgs":true}],"type":{"k":12,"name":"Seq.Indexed","args":[{"k":2}],"url":"/docs/v5.1.1/Seq.Indexed"}}],"url":"/docs/v5.1.1/Seq.Indexed#zipAll()","overrides":{"interface":"Collection.Indexed","label":"zipAll()","url":"/docs/v5.1.1/Collection.Indexed#zipAll()"}},"zipWith":{"name":"zipWith","label":"zipWith()","id":"zipWith()","group":"Combination","signatures":[{"line":3430,"typeParams":["U","Z"],"params":[{"name":"zipper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"otherValue","type":{"k":11,"param":"U"}}],"type":{"k":11,"param":"Z"}}},{"name":"otherCollection","type":{"k":12,"name":"Collection","args":[{"k":2},{"k":11,"param":"U"}],"url":"/docs/v5.1.1/Collection"}}],"type":{"k":12,"name":"Seq.Indexed","args":[{"k":11,"param":"Z"}],"url":"/docs/v5.1.1/Seq.Indexed"}},{"line":3434,"typeParams":["U","V","Z"],"params":[{"name":"zipper","type":{"k":10,"params":[{"name":"value","type":{"k":11,"param":"T"}},{"name":"otherValue","type":{"k":11,"param":"U"}},{"name":"thirdValue","type":{"k":11,"param":"V"}}],"type":{"k":11,"param":"Z"}}},{"name":"otherCollection","type":{"k":12,"name":"Collection","args":[{"k":2},{"k":11,"param":"U"}],"url":"/docs/v5.1.1/Collection"}},{"name":"thirdCollection","type":{"k":12,"name":"Collection","args":[{"k":2},{"k":11,"param":"V"}],"url":"/docs/v5.1.1/Collection"}}],"type":{"k":12,"name":"Seq.Indexed","args":[{"k":11,"param":"Z"}],"url":"/docs/v5.1.1/Seq.Indexed"}},{"line":3439,"typeParams":["Z"],"params":[{"name":"zipper","type":{"k":10,"params":[{"name":"values","type":{"k":12,"name":"Array","args":[{"k":2}]},"varArgs":true}],"type":{"k":11,"param":"Z"}}},{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":12,"name":"Collection","args":[{"k":2},{"k":2}]}]},"varArgs":true}],"type":{"k":12,"name":"Seq.Indexed","args":[{"k":11,"param":"Z"}],"url":"/docs/v5.1.1/Seq.Indexed"}}],"url":"/docs/v5.1.1/Seq.Indexed#zipWith()","overrides":{"interface":"Collection.Indexed","label":"zipWith()","url":"/docs/v5.1.1/Collection.Indexed#zipWith()"}},"[Symbol.iterator]":{"name":"[Symbol.iterator]","label":"[Symbol.iterator]()","id":"[Symbol.iterator]()","group":"Iterators","signatures":[{"line":3444,"type":{"k":12,"name":"IterableIterator","args":[{"k":11,"param":"T"}]}}],"url":"/docs/v5.1.1/Seq.Indexed#[Symbol.iterator]()","overrides":{"interface":"Collection","label":"[Symbol.iterator]()","url":"/docs/v5.1.1/Collection#[Symbol.iterator]()"}},"size":{"name":"size","label":"size","id":"size","line":3596,"doc":{"synopsis":"<p>Some Seqs can describe their size lazily. When this is the case,\nsize will be an integer. Otherwise it will be undefined.</p>\n","description":"<p>For example, Seqs returned from <code><a href=\"/docs/v5.1.1/Seq#map()\">map()</a></code> or <code><a href=\"/docs/v5.1.1/Seq#reverse()\">reverse()</a></code>\npreserve the size of the original <code><a href=\"/docs/v5.1.1/Seq\">Seq</a></code> while <code><a href=\"/docs/v5.1.1/Seq#filter()\">filter()</a></code> does not.</p>\n<p>Note: <code><a href=\"/docs/v5.1.1/Range()\">Range</a></code>, <code><a href=\"/docs/v5.1.1/Repeat()\">Repeat</a></code> and <code><a href=\"/docs/v5.1.1/Seq\">Seq</a></code>s made from <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array\" target=\"_blank\" rel=\"noopener\">Array</a></code>s and <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object\" target=\"_blank\" rel=\"noopener\">Object</a></code>s will\nalways have a size.</p>\n","notes":[]},"type":{"k":13,"types":[{"k":6},{"k":4}]},"url":"/docs/v5.1.1/Seq.Indexed#size","inherited":{"interface":"Seq","label":"size","url":"/docs/v5.1.1/Seq#size"}},"cacheResult":{"name":"cacheResult","label":"cacheResult()","id":"cacheResult()","group":"Force evaluation","doc":{"synopsis":"<p>Because Sequences are lazy and designed to be chained together, they do\nnot cache their results. For example, this map function is called a total\nof 6 times, as each <code><a href=\"/docs/v5.1.1/Seq#join()\">join</a></code> iterates the Seq of three values.</p>\n","description":"$4","notes":[]},"signatures":[{"line":3620,"type":{"k":3}}],"url":"/docs/v5.1.1/Seq.Indexed#cacheResult()","inherited":{"interface":"Seq","label":"cacheResult()","url":"/docs/v5.1.1/Seq#cacheResult()"}},"equals":{"name":"equals","label":"equals()","id":"equals()","group":"Value equality","doc":{"synopsis":"<p>True if this and the other Collection have value equality, as defined\nby <code><a href=\"/docs/v5.1.1/is()\">Immutable.is()</a></code>.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token qualifier\">Immutable</span><span class=\"token punctuation\">.</span><span class=\"token function\">is</span><span class=\"token punctuation\">(</span><span class=\"token var\">this</span><span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">)</span></code>, but provided to\nallow for chained expressions.</p>\n","notes":[]},"signatures":[{"line":4383,"params":[{"name":"other","type":{"k":2}}],"type":{"k":5}}],"url":"/docs/v5.1.1/Seq.Indexed#equals()","inherited":{"interface":"Collection","label":"equals()","url":"/docs/v5.1.1/Collection#equals()"}},"hashCode":{"name":"hashCode","label":"hashCode()","id":"hashCode()","group":"Value equality","doc":{"synopsis":"<p>Computes and returns the hashed identity for this Collection.</p>\n","description":"$5","notes":[]},"signatures":[{"line":4409,"type":{"k":6}}],"url":"/docs/v5.1.1/Seq.Indexed#hashCode()","inherited":{"interface":"Collection","label":"hashCode()","url":"/docs/v5.1.1/Collection#hashCode()"}},"get":{"name":"get","label":"get()","id":"get()","group":"Reading values","signatures":[{"line":4421,"typeParams":["NSV"],"params":[{"name":"key","type":{"k":6}},{"name":"notSetValue","type":{"k":11,"param":"NSV"}}],"type":{"k":13,"types":[{"k":11,"param":"T"},{"k":11,"param":"NSV"}]}},{"line":4422,"params":[{"name":"key","type":"$6"}],"type":{"k":13,"types":["$7",{"k":4}]}}],"url":"/docs/v5.1.1/Seq.Indexed#get()","inherited":{"interface":"Collection","label":"get()","url":"/docs/v5.1.1/Collection#get()"}},"has":{"name":"has","label":"has()","id":"has()","group":"Reading values","doc":{"synopsis":"<p>True if a key exists within this <code><a href=\"/docs/v5.1.1/Collection\">Collection</a></code>, using <code><a href=\"/docs/v5.1.1/is()\">Immutable.is</a></code>\nto determine equality</p>\n","description":"","notes":[]},"signatures":[{"line":4428,"params":[{"name":"key","type":"$6"}],"type":{"k":5}}],"url":"/docs/v5.1.1/Seq.Indexed#has()","inherited":{"interface":"Collection","label":"has()","url":"/docs/v5.1.1/Collection#has()"}},"includes":{"name":"includes","label":"includes()","id":"includes()","group":"Reading values","doc":{"synopsis":"<p>True if a value exists within this <code><a href=\"/docs/v5.1.1/Collection\">Collection</a></code>, using <code><a href=\"/docs/v5.1.1/is()\">Immutable.is</a></code>\nto determine equality</p>\n","description":"","notes":[{"name":"alias","body":"contains"}]},"signatures":[{"line":4435,"params":[{"name":"value","type":"$7"}],"type":{"k":5}}],"url":"/docs/v5.1.1/Seq.Indexed#includes()","inherited":{"interface":"Collection","label":"includes()","url":"/docs/v5.1.1/Collection#includes()"}},"first":{"name":"first","label":"first()","id":"first()","group":"Reading values","signatures":[{"line":4444,"typeParams":["NSV"],"params":[{"name":"notSetValue","type":{"k":11,"param":"NSV"}}],"type":{"k":13,"types":["$7",{"k":11,"param":"NSV"}]}},{"line":4445,"type":{"k":13,"types":["$7",{"k":4}]}}],"url":"/docs/v5.1.1/Seq.Indexed#first()","inherited":{"interface":"Collection","label":"first()","url":"/docs/v5.1.1/Collection#first()"}},"last":{"name":"last","label":"last()","id":"last()","group":"Reading values","signatures":[{"line":4453,"typeParams":["NSV"],"params":[{"name":"notSetValue","type":{"k":11,"param":"NSV"}}],"type":{"k":13,"types":["$7",{"k":11,"param":"NSV"}]}},{"line":4454,"type":{"k":13,"types":["$7",{"k":4}]}}],"url":"/docs/v5.1.1/Seq.Indexed#last()","inherited":{"interface":"Collection","label":"last()","url":"/docs/v5.1.1/Collection#last()"}},"getIn":{"name":"getIn","label":"getIn()","id":"getIn()","group":"Reading deep values","doc":{"synopsis":"<p>Returns the value found by following a path of keys or indices through\nnested Collections.</p>\n","description":"$8","notes":[]},"signatures":[{"line":4479,"params":[{"name":"searchKeyPath","type":{"k":12,"name":"Iterable","args":[{"k":2}]}},{"name":"notSetValue","type":{"k":2},"optional":true}],"type":{"k":2}}],"url":"/docs/v5.1.1/Seq.Indexed#getIn()","inherited":{"interface":"Collection","label":"getIn()","url":"/docs/v5.1.1/Collection#getIn()"}},"hasIn":{"name":"hasIn","label":"hasIn()","id":"hasIn()","group":"Reading deep values","doc":{"synopsis":"<p>True if the result of following a path of keys or indices through nested\nCollections results in a set value.</p>\n","description":"","notes":[]},"signatures":[{"line":4485,"params":[{"name":"searchKeyPath","type":{"k":12,"name":"Iterable","args":[{"k":2}]}}],"type":{"k":5}}],"url":"/docs/v5.1.1/Seq.Indexed#hasIn()","inherited":{"interface":"Collection","label":"hasIn()","url":"/docs/v5.1.1/Collection#hasIn()"}},"update":{"name":"update","label":"update()","id":"update()","group":"Persistent changes","doc":{"synopsis":"<p>This can be very useful as a way to &quot;chain&quot; a normal function into a\nsequence of methods. RxJS calls this &quot;let&quot; and lodash calls it &quot;thru&quot;.</p>\n","description":"$9","notes":[]},"signatures":[{"line":4510,"typeParams":["R"],"params":[{"name":"updater","type":{"k":10,"params":[{"name":"value","type":{"k":3}}],"type":{"k":11,"param":"R"}}}],"type":{"k":11,"param":"R"}}],"url":"/docs/v5.1.1/Seq.Indexed#update()","inherited":{"interface":"Collection","label":"update()","url":"/docs/v5.1.1/Collection#update()"}},"toObject":{"name":"toObject","label":"toObject()","id":"toObject()","group":"Conversion to JavaScript types","doc":{"synopsis":"<p>Shallowly converts this Collection to an Object.</p>\n","description":"<p>Converts keys to Strings.</p>\n","notes":[]},"signatures":[{"line":4543,"type":{"k":8,"members":[{"index":true,"params":[{"name":"key","type":{"k":7}}],"type":"$7"}]}}],"url":"/docs/v5.1.1/Seq.Indexed#toObject()","inherited":{"interface":"Collection","label":"toObject()","url":"/docs/v5.1.1/Collection#toObject()"}},"toMap":{"name":"toMap","label":"toMap()","id":"toMap()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a Map, Throws if keys are not hashable.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token function\">Map</span><span class=\"token punctuation\">(</span><span class=\"token var\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toKeyedSeq</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n","notes":[]},"signatures":[{"line":4553,"type":{"k":12,"name":"Map","args":["$6","$7"],"url":"/docs/v5.1.1/Map"}}],"url":"/docs/v5.1.1/Seq.Indexed#toMap()","inherited":{"interface":"Collection","label":"toMap()","url":"/docs/v5.1.1/Collection#toMap()"}},"toOrderedMap":{"name":"toOrderedMap","label":"toOrderedMap()","id":"toOrderedMap()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a Map, maintaining the order of iteration.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token function\">OrderedMap</span><span class=\"token punctuation\">(</span><span class=\"token var\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">toKeyedSeq</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code>, but\nprovided for convenience and to allow for chained expressions.</p>\n","notes":[]},"signatures":[{"line":4561,"type":{"k":12,"name":"OrderedMap","args":["$6","$7"],"url":"/docs/v5.1.1/OrderedMap"}}],"url":"/docs/v5.1.1/Seq.Indexed#toOrderedMap()","inherited":{"interface":"Collection","label":"toOrderedMap()","url":"/docs/v5.1.1/Collection#toOrderedMap()"}},"toSet":{"name":"toSet","label":"toSet()","id":"toSet()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a Set, discarding keys. Throws if values\nare not hashable.</p>\n","description":"<p>Note: This is equivalent to <code><a href=\"/docs/v5.1.1/Set\">Set(this)</a></code>, but provided to allow for\nchained expressions.</p>\n","notes":[]},"signatures":[{"line":4570,"type":{"k":12,"name":"Set","args":["$7"],"url":"/docs/v5.1.1/Set"}}],"url":"/docs/v5.1.1/Seq.Indexed#toSet()","inherited":{"interface":"Collection","label":"toSet()","url":"/docs/v5.1.1/Collection#toSet()"}},"toOrderedSet":{"name":"toOrderedSet","label":"toOrderedSet()","id":"toOrderedSet()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a Set, maintaining the order of iteration and\ndiscarding keys.</p>\n","description":"<p>Note: This is equivalent to <code><span class=\"token function\">OrderedSet</span><span class=\"token punctuation\">(</span><span class=\"token var\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">valueSeq</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code>, but provided\nfor convenience and to allow for chained expressions.</p>\n","notes":[]},"signatures":[{"line":4579,"type":{"k":12,"name":"OrderedSet","args":["$7"],"url":"/docs/v5.1.1/OrderedSet"}}],"url":"/docs/v5.1.1/Seq.Indexed#toOrderedSet()","inherited":{"interface":"Collection","label":"toOrderedSet()","url":"/docs/v5.1.1/Collection#toOrderedSet()"}},"toList":{"name":"toList","label":"toList()","id":"toList()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a List, discarding keys.</p>\n","description":"$a","notes":[]},"signatures":[{"line":4597,"type":{"k":12,"name":"List","args":["$7"],"url":"/docs/v5.1.1/List"}}],"url":"/docs/v5.1.1/Seq.Indexed#toList()","inherited":{"interface":"Collection","label":"toList()","url":"/docs/v5.1.1/Collection#toList()"}},"toStack":{"name":"toStack","label":"toStack()","id":"toStack()","group":"Conversion to Collections","doc":{"synopsis":"<p>Converts this Collection to a Stack, discarding keys. Throws if values\nare not hashable.</p>\n","description":"<p>Note: This is equivalent to <code><a href=\"/docs/v5.1.1/Stack\">Stack(this)</a></code>, but provided to allow for\nchained expressions.</p>\n","notes":[]},"signatures":[{"line":4606,"type":{"k":12,"name":"Stack","args":["$7"],"url":"/docs/v5.1.1/Stack"}}],"url":"/docs/v5.1.1/Seq.Indexed#toStack()","inherited":{"interface":"Collection","label":"toStack()","url":"/docs/v5.1.1/Collection#toStack()"}},"toKeyedSeq":{"name":"toKeyedSeq","label":"toKeyedSeq()","id":"toKeyedSeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>Returns a Seq.Keyed from this Collection where indices are treated as keys.</p>\n","description":"$b","notes":[]},"signatures":[{"line":4638,"type":{"k":12,"name":"Seq.Keyed","args":["$6","$7"],"url":"/docs/v5.1.1/Seq.Keyed"}}],"url":"/docs/v5.1.1/Seq.Indexed#toKeyedSeq()","inherited":{"interface":"Collection","label":"toKeyedSeq()","url":"/docs/v5.1.1/Collection#toKeyedSeq()"}},"toIndexedSeq":{"name":"toIndexedSeq","label":"toIndexedSeq()","id":"toIndexedSeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n","description":"","notes":[]},"signatures":[{"line":4643,"type":{"k":12,"name":"Seq.Indexed","args":["$7"],"url":"/docs/v5.1.1/Seq.Indexed"}}],"url":"/docs/v5.1.1/Seq.Indexed#toIndexedSeq()","inherited":{"interface":"Collection","label":"toIndexedSeq()","url":"/docs/v5.1.1/Collection#toIndexedSeq()"}},"toSetSeq":{"name":"toSetSeq","label":"toSetSeq()","id":"toSetSeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>Returns a Seq.Set of the values of this Collection, discarding keys.</p>\n","description":"","notes":[]},"signatures":[{"line":4648,"type":{"k":12,"name":"Seq.Set","args":["$7"],"url":"/docs/v5.1.1/Seq.Set"}}],"url":"/docs/v5.1.1/Seq.Indexed#toSetSeq()","inherited":{"interface":"Collection","label":"toSetSeq()","url":"/docs/v5.1.1/Collection#toSetSeq()"}},"keys":{"name":"keys","label":"keys()","id":"keys()","group":"Iterators","doc":{"synopsis":"<p>An iterator of this <code><a href=\"/docs/v5.1.1/Collection\">Collection</a></code>&#39;s keys.</p>\n","description":"<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/v5.1.1/List#keySeq()\">keySeq</a></code> instead, if this is\nwhat you want.</p>\n","notes":[]},"signatures":[{"line":4659,"type":{"k":12,"name":"IterableIterator","args":["$6"]}}],"url":"/docs/v5.1.1/Seq.Indexed#keys()","inherited":{"interface":"Collection","label":"keys()","url":"/docs/v5.1.1/Collection#keys()"}},"values":{"name":"values","label":"values()","id":"values()","group":"Iterators","doc":{"synopsis":"<p>An iterator of this <code><a href=\"/docs/v5.1.1/Collection\">Collection</a></code>&#39;s values.</p>\n","description":"<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/v5.1.1/List#valueSeq()\">valueSeq</a></code> instead, if this is\nwhat you want.</p>\n","notes":[]},"signatures":[{"line":4668,"type":{"k":12,"name":"IterableIterator","args":["$7"]}}],"url":"/docs/v5.1.1/Seq.Indexed#values()","inherited":{"interface":"Collection","label":"values()","url":"/docs/v5.1.1/Collection#values()"}},"entries":{"name":"entries","label":"entries()","id":"entries()","group":"Iterators","doc":{"synopsis":"<p>An iterator of this <code><a href=\"/docs/v5.1.1/Collection\">Collection</a></code>&#39;s entries as <code><span class=\"token punctuation\">[</span> key<span class=\"token punctuation\">,</span> value <span class=\"token punctuation\">]</span></code> tuples.</p>\n","description":"<p>Note: this will return an ES6 iterator which does not support\nImmutable.js sequence algorithms. Use <code><a href=\"/docs/v5.1.1/List#entrySeq()\">entrySeq</a></code> instead, if this is\nwhat you want.</p>\n","notes":[]},"signatures":[{"line":4677,"type":{"k":12,"name":"IterableIterator","args":[{"k":15,"types":["$6","$7"]}]}}],"url":"/docs/v5.1.1/Seq.Indexed#entries()","inherited":{"interface":"Collection","label":"entries()","url":"/docs/v5.1.1/Collection#entries()"}},"keySeq":{"name":"keySeq","label":"keySeq()","id":"keySeq()","group":"Collections (Seq)","doc":{"synopsis":"<p>Returns a new Seq.Indexed of the keys of this Collection,\ndiscarding values.</p>\n","description":"","notes":[]},"signatures":[{"line":4687,"type":{"k":12,"name":"Seq.Indexed","args":["$6"],"url":"/docs/v5.1.1/Seq.Indexed"}}],"url":"/docs/v5.1.1/Seq.Indexed#keySeq()","inherited":{"interface":"Collection","label":"keySeq()","url":"/docs/v5.1.1/Collection#keySeq()"}},"valueSeq":{"name":"valueSeq","label":"valueSeq()","id":"valueSeq()","group":"Collections (Seq)","doc":{"synopsis":"<p>Returns an Seq.Indexed of the values of this Collection, discarding keys.</p>\n","description":"","notes":[]},"signatures":[{"line":4692,"type":{"k":12,"name":"Seq.Indexed","args":["$7"],"url":"/docs/v5.1.1/Seq.Indexed"}}],"url":"/docs/v5.1.1/Seq.Indexed#valueSeq()","inherited":{"interface":"Collection","label":"valueSeq()","url":"/docs/v5.1.1/Collection#valueSeq()"}},"entrySeq":{"name":"entrySeq","label":"entrySeq()","id":"entrySeq()","group":"Collections (Seq)","doc":{"synopsis":"<p>Returns a new Seq.Indexed of [key, value] tuples.</p>\n","description":"","notes":[]},"signatures":[{"line":4697,"type":{"k":12,"name":"Seq.Indexed","args":[{"k":15,"types":["$6","$7"]}],"url":"/docs/v5.1.1/Seq.Indexed"}}],"url":"/docs/v5.1.1/Seq.Indexed#entrySeq()","inherited":{"interface":"Collection","label":"entrySeq()","url":"/docs/v5.1.1/Collection#entrySeq()"}},"filterNot":{"name":"filterNot","label":"filterNot()","id":"filterNot()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Collection of the same type with only the entries for which\nthe <code><span class=\"t param\">predicate</span></code> function returns false.</p>\n","description":"$c","notes":[]},"signatures":[{"line":4765,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$7"},{"name":"key","type":"$6"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":3}}],"url":"/docs/v5.1.1/Seq.Indexed#filterNot()","inherited":{"interface":"Collection","label":"filterNot()","url":"/docs/v5.1.1/Collection#filterNot()"}},"reverse":{"name":"reverse","label":"reverse()","id":"reverse()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Collection of the same type in reverse order.</p>\n","description":"","notes":[]},"signatures":[{"line":4786,"type":{"k":3}}],"url":"/docs/v5.1.1/Seq.Indexed#reverse()","inherited":{"interface":"Collection","label":"reverse()","url":"/docs/v5.1.1/Collection#reverse()"}},"sort":{"name":"sort","label":"sort()","id":"sort()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes the same entries,\nstably sorted by using a <code><span class=\"t param\">comparator</span></code>.</p>\n","description":"$d","notes":[]},"signatures":[{"line":4822,"params":[{"name":"comparator","type":{"k":12,"name":"Comparator","args":["$7"]},"optional":true}],"type":{"k":3}}],"url":"/docs/v5.1.1/Seq.Indexed#sort()","inherited":{"interface":"Collection","label":"sort()","url":"/docs/v5.1.1/Collection#sort()"}},"sortBy":{"name":"sortBy","label":"sortBy()","id":"sortBy()","group":"Sequence algorithms","doc":{"synopsis":"<p>Like <code><a href=\"/docs/v5.1.1/List#sort()\">sort</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\nsorting by more sophisticated means:</p>\n","description":"$e","notes":[]},"signatures":[{"line":4845,"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":10,"params":[{"name":"value","type":"$7"},{"name":"key","type":"$6"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"C"}}},{"name":"comparator","type":{"k":12,"name":"Comparator","args":[{"k":11,"param":"C"}]},"optional":true}],"type":{"k":3}}],"url":"/docs/v5.1.1/Seq.Indexed#sortBy()","inherited":{"interface":"Collection","label":"sortBy()","url":"/docs/v5.1.1/Collection#sortBy()"}},"groupBy":{"name":"groupBy","label":"groupBy()","id":"groupBy()","group":"Sequence algorithms","doc":{"synopsis":"<p>Returns a <code><a href=\"/docs/v5.1.1/Map\">Map</a></code> of <code><a href=\"/docs/v5.1.1/Collection\">Collection</a></code>, grouped by the return\nvalue of the <code><span class=\"t param\">grouper</span></code> function.</p>\n","description":"$f","notes":[]},"signatures":[{"line":4874,"typeParams":["G"],"params":[{"name":"grouper","type":{"k":10,"params":[{"name":"value","type":"$7"},{"name":"key","type":"$6"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"G"}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":12,"name":"Map","args":[{"k":11,"param":"G"},{"k":3}],"url":"/docs/v5.1.1/Map"}}],"url":"/docs/v5.1.1/Seq.Indexed#groupBy()","inherited":{"interface":"Collection","label":"groupBy()","url":"/docs/v5.1.1/Collection#groupBy()"}},"forEach":{"name":"forEach","label":"forEach()","id":"forEach()","group":"Side effects","doc":{"synopsis":"<p>The <code><span class=\"t param\">sideEffect</span></code> is executed for every entry in the Collection.</p>\n","description":"<p>Unlike <code><a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach\" target=\"_blank\" rel=\"noopener\">Array#forEach</a></code>, if any call of <code><span class=\"t param\">sideEffect</span></code> returns\n<code><span class=\"token primitive\">false</span></code>, the iteration will stop. Returns the number of entries iterated\n(including the last iteration which returned false).</p>\n","notes":[]},"signatures":[{"line":4888,"params":[{"name":"sideEffect","type":{"k":10,"params":[{"name":"value","type":"$7"},{"name":"key","type":"$6"},{"name":"iter","type":{"k":3}}],"type":{"k":2}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":6}}],"url":"/docs/v5.1.1/Seq.Indexed#forEach()","inherited":{"interface":"Collection","label":"forEach()","url":"/docs/v5.1.1/Collection#forEach()"}},"slice":{"name":"slice","label":"slice()","id":"slice()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type representing a portion of this\nCollection from start up to but not including end.</p>\n","description":"$10","notes":[]},"signatures":[{"line":4911,"params":[{"name":"begin","type":{"k":6},"optional":true},{"name":"end","type":{"k":6},"optional":true}],"type":{"k":3}}],"url":"/docs/v5.1.1/Seq.Indexed#slice()","inherited":{"interface":"Collection","label":"slice()","url":"/docs/v5.1.1/Collection#slice()"}},"rest":{"name":"rest","label":"rest()","id":"rest()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type containing all entries except\nthe first.</p>\n","description":"","notes":[]},"signatures":[{"line":4917,"type":{"k":3}}],"url":"/docs/v5.1.1/Seq.Indexed#rest()","inherited":{"interface":"Collection","label":"rest()","url":"/docs/v5.1.1/Collection#rest()"}},"butLast":{"name":"butLast","label":"butLast()","id":"butLast()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type containing all entries except\nthe last.</p>\n","description":"","notes":[]},"signatures":[{"line":4923,"type":{"k":3}}],"url":"/docs/v5.1.1/Seq.Indexed#butLast()","inherited":{"interface":"Collection","label":"butLast()","url":"/docs/v5.1.1/Collection#butLast()"}},"skip":{"name":"skip","label":"skip()","id":"skip()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which excludes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":4929,"params":[{"name":"amount","type":{"k":6}}],"type":{"k":3}}],"url":"/docs/v5.1.1/Seq.Indexed#skip()","inherited":{"interface":"Collection","label":"skip()","url":"/docs/v5.1.1/Collection#skip()"}},"skipLast":{"name":"skipLast","label":"skipLast()","id":"skipLast()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which excludes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":4935,"params":[{"name":"amount","type":{"k":6}}],"type":{"k":3}}],"url":"/docs/v5.1.1/Seq.Indexed#skipLast()","inherited":{"interface":"Collection","label":"skipLast()","url":"/docs/v5.1.1/Collection#skipLast()"}},"skipWhile":{"name":"skipWhile","label":"skipWhile()","id":"skipWhile()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns false.</p>\n","description":"$11","notes":[]},"signatures":[{"line":4949,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$7"},{"name":"key","type":"$6"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":3}}],"url":"/docs/v5.1.1/Seq.Indexed#skipWhile()","inherited":{"interface":"Collection","label":"skipWhile()","url":"/docs/v5.1.1/Collection#skipWhile()"}},"skipUntil":{"name":"skipUntil","label":"skipUntil()","id":"skipUntil()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes entries starting\nfrom when <code><span class=\"t param\">predicate</span></code> first returns true.</p>\n","description":"$12","notes":[]},"signatures":[{"line":4966,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$7"},{"name":"key","type":"$6"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":3}}],"url":"/docs/v5.1.1/Seq.Indexed#skipUntil()","inherited":{"interface":"Collection","label":"skipUntil()","url":"/docs/v5.1.1/Collection#skipUntil()"}},"take":{"name":"take","label":"take()","id":"take()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes the first <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":4975,"params":[{"name":"amount","type":{"k":6}}],"type":{"k":3}}],"url":"/docs/v5.1.1/Seq.Indexed#take()","inherited":{"interface":"Collection","label":"take()","url":"/docs/v5.1.1/Collection#take()"}},"takeLast":{"name":"takeLast","label":"takeLast()","id":"takeLast()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes the last <code><span class=\"t param\">amount</span></code>\nentries from this Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":4981,"params":[{"name":"amount","type":{"k":6}}],"type":{"k":3}}],"url":"/docs/v5.1.1/Seq.Indexed#takeLast()","inherited":{"interface":"Collection","label":"takeLast()","url":"/docs/v5.1.1/Collection#takeLast()"}},"takeWhile":{"name":"takeWhile","label":"takeWhile()","id":"takeWhile()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"$13","notes":[]},"signatures":[{"line":4995,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$7"},{"name":"key","type":"$6"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":3}}],"url":"/docs/v5.1.1/Seq.Indexed#takeWhile()","inherited":{"interface":"Collection","label":"takeWhile()","url":"/docs/v5.1.1/Collection#takeWhile()"}},"takeUntil":{"name":"takeUntil","label":"takeUntil()","id":"takeUntil()","group":"Creating subsets","doc":{"synopsis":"<p>Returns a new Collection of the same type which includes entries from this\nCollection as long as the <code><span class=\"t param\">predicate</span></code> returns false.</p>\n","description":"$14","notes":[]},"signatures":[{"line":5012,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$7"},{"name":"key","type":"$6"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":3}}],"url":"/docs/v5.1.1/Seq.Indexed#takeUntil()","inherited":{"interface":"Collection","label":"takeUntil()","url":"/docs/v5.1.1/Collection#takeUntil()"}},"flatten":{"name":"flatten","label":"flatten()","id":"flatten()","group":"Combination","signatures":[{"line":5043,"params":[{"name":"depth","type":{"k":6},"optional":true}],"type":{"k":12,"name":"Collection","args":[{"k":2},{"k":2}],"url":"/docs/v5.1.1/Collection"}},{"line":5044,"params":[{"name":"shallow","type":{"k":5},"optional":true}],"type":{"k":12,"name":"Collection","args":[{"k":2},{"k":2}],"url":"/docs/v5.1.1/Collection"}}],"url":"/docs/v5.1.1/Seq.Indexed#flatten()","inherited":{"interface":"Collection","label":"flatten()","url":"/docs/v5.1.1/Collection#flatten()"}},"reduce":{"name":"reduce","label":"reduce()","id":"reduce()","group":"Reducing a value","signatures":[{"line":5078,"typeParams":["R"],"params":[{"name":"reducer","type":{"k":10,"params":[{"name":"reduction","type":{"k":11,"param":"R"}},{"name":"value","type":"$7"},{"name":"key","type":"$6"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"R"}}},{"name":"initialReduction","type":{"k":11,"param":"R"}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":11,"param":"R"}},{"line":5083,"typeParams":["R"],"params":[{"name":"reducer","type":{"k":10,"params":[{"name":"reduction","type":{"k":13,"types":["$7",{"k":11,"param":"R"}]}},{"name":"value","type":"$7"},{"name":"key","type":"$6"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"R"}}}],"type":{"k":11,"param":"R"}}],"url":"/docs/v5.1.1/Seq.Indexed#reduce()","inherited":{"interface":"Collection","label":"reduce()","url":"/docs/v5.1.1/Collection#reduce()"}},"reduceRight":{"name":"reduceRight","label":"reduceRight()","id":"reduceRight()","group":"Reducing a value","signatures":[{"line":5093,"typeParams":["R"],"params":[{"name":"reducer","type":{"k":10,"params":[{"name":"reduction","type":{"k":11,"param":"R"}},{"name":"value","type":"$7"},{"name":"key","type":"$6"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"R"}}},{"name":"initialReduction","type":{"k":11,"param":"R"}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":11,"param":"R"}},{"line":5098,"typeParams":["R"],"params":[{"name":"reducer","type":{"k":10,"params":[{"name":"reduction","type":{"k":13,"types":["$7",{"k":11,"param":"R"}]}},{"name":"value","type":"$7"},{"name":"key","type":"$6"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"R"}}}],"type":{"k":11,"param":"R"}}],"url":"/docs/v5.1.1/Seq.Indexed#reduceRight()","inherited":{"interface":"Collection","label":"reduceRight()","url":"/docs/v5.1.1/Collection#reduceRight()"}},"every":{"name":"every","label":"every()","id":"every()","group":"Reducing a value","doc":{"synopsis":"<p>True if <code><span class=\"t param\">predicate</span></code> returns true for all entries in the Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":5105,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$7"},{"name":"key","type":"$6"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":5}}],"url":"/docs/v5.1.1/Seq.Indexed#every()","inherited":{"interface":"Collection","label":"every()","url":"/docs/v5.1.1/Collection#every()"}},"some":{"name":"some","label":"some()","id":"some()","group":"Reducing a value","doc":{"synopsis":"<p>True if <code><span class=\"t param\">predicate</span></code> returns true for any entry in the Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":5113,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$7"},{"name":"key","type":"$6"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":5}}],"url":"/docs/v5.1.1/Seq.Indexed#some()","inherited":{"interface":"Collection","label":"some()","url":"/docs/v5.1.1/Collection#some()"}},"join":{"name":"join","label":"join()","id":"join()","group":"Reducing a value","doc":{"synopsis":"<p>Joins values together as a string, inserting a separator between each.\nThe default separator is <code><span class=\"token string\">\",\"</span></code>.</p>\n","description":"","notes":[]},"signatures":[{"line":5122,"params":[{"name":"separator","type":{"k":7},"optional":true}],"type":{"k":7}}],"url":"/docs/v5.1.1/Seq.Indexed#join()","inherited":{"interface":"Collection","label":"join()","url":"/docs/v5.1.1/Collection#join()"}},"isEmpty":{"name":"isEmpty","label":"isEmpty()","id":"isEmpty()","group":"Reducing a value","doc":{"synopsis":"<p>Returns true if this Collection includes no values.</p>\n","description":"<p>For some lazy <code><a href=\"/docs/v5.1.1/Seq\">Seq</a></code>, <code><a href=\"/docs/v5.1.1/List#isEmpty()\">isEmpty</a></code> might need to iterate to determine\nemptiness. At most one iteration will occur.</p>\n","notes":[]},"signatures":[{"line":5130,"type":{"k":5}}],"url":"/docs/v5.1.1/Seq.Indexed#isEmpty()","inherited":{"interface":"Collection","label":"isEmpty()","url":"/docs/v5.1.1/Collection#isEmpty()"}},"count":{"name":"count","label":"count()","id":"count()","group":"Reducing a value","signatures":[{"line":5142,"type":{"k":6}},{"line":5143,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$7"},{"name":"key","type":"$6"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":6}}],"url":"/docs/v5.1.1/Seq.Indexed#count()","inherited":{"interface":"Collection","label":"count()","url":"/docs/v5.1.1/Collection#count()"}},"countBy":{"name":"countBy","label":"countBy()","id":"countBy()","group":"Reducing a value","doc":{"synopsis":"<p>Returns a <code><a href=\"/docs/v5.1.1/Seq.Keyed\">Seq.Keyed</a></code> of counts, grouped by the return value of\nthe <code><span class=\"t param\">grouper</span></code> function.</p>\n","description":"<p>Note: This is not a lazy operation.</p>\n","notes":[]},"signatures":[{"line":5154,"typeParams":["G"],"params":[{"name":"grouper","type":{"k":10,"params":[{"name":"value","type":"$7"},{"name":"key","type":"$6"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"G"}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":12,"name":"Map","args":[{"k":11,"param":"G"},{"k":6}],"url":"/docs/v5.1.1/Map"}}],"url":"/docs/v5.1.1/Seq.Indexed#countBy()","inherited":{"interface":"Collection","label":"countBy()","url":"/docs/v5.1.1/Collection#countBy()"}},"find":{"name":"find","label":"find()","id":"find()","group":"Search for value","doc":{"synopsis":"<p>Returns the first value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"","notes":[]},"signatures":[{"line":5164,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$7"},{"name":"key","type":"$6"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true},{"name":"notSetValue","type":"$7","optional":true}],"type":{"k":13,"types":["$7",{"k":4}]}}],"url":"/docs/v5.1.1/Seq.Indexed#find()","inherited":{"interface":"Collection","label":"find()","url":"/docs/v5.1.1/Collection#find()"}},"findLast":{"name":"findLast","label":"findLast()","id":"findLast()","group":"Search for value","doc":{"synopsis":"<p>Returns the last value for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n","notes":[]},"signatures":[{"line":5175,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$7"},{"name":"key","type":"$6"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true},{"name":"notSetValue","type":"$7","optional":true}],"type":{"k":13,"types":["$7",{"k":4}]}}],"url":"/docs/v5.1.1/Seq.Indexed#findLast()","inherited":{"interface":"Collection","label":"findLast()","url":"/docs/v5.1.1/Collection#findLast()"}},"findEntry":{"name":"findEntry","label":"findEntry()","id":"findEntry()","group":"Search for value","doc":{"synopsis":"<p>Returns the first [key, value] entry for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"","notes":[]},"signatures":[{"line":5184,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$7"},{"name":"key","type":"$6"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true},{"name":"notSetValue","type":"$7","optional":true}],"type":{"k":13,"types":[{"k":15,"types":["$6","$7"]},{"k":4}]}}],"url":"/docs/v5.1.1/Seq.Indexed#findEntry()","inherited":{"interface":"Collection","label":"findEntry()","url":"/docs/v5.1.1/Collection#findEntry()"}},"findLastEntry":{"name":"findLastEntry","label":"findLastEntry()","id":"findLastEntry()","group":"Search for value","doc":{"synopsis":"<p>Returns the last [key, value] entry for which the <code><span class=\"t param\">predicate</span></code>\nreturns true.</p>\n","description":"<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n","notes":[]},"signatures":[{"line":5196,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$7"},{"name":"key","type":"$6"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true},{"name":"notSetValue","type":"$7","optional":true}],"type":{"k":13,"types":[{"k":15,"types":["$6","$7"]},{"k":4}]}}],"url":"/docs/v5.1.1/Seq.Indexed#findLastEntry()","inherited":{"interface":"Collection","label":"findLastEntry()","url":"/docs/v5.1.1/Collection#findLastEntry()"}},"findKey":{"name":"findKey","label":"findKey()","id":"findKey()","group":"Search for value","doc":{"synopsis":"<p>Returns the key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"","notes":[]},"signatures":[{"line":5205,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$7"},{"name":"key","type":"$6"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":13,"types":["$6",{"k":4}]}}],"url":"/docs/v5.1.1/Seq.Indexed#findKey()","inherited":{"interface":"Collection","label":"findKey()","url":"/docs/v5.1.1/Collection#findKey()"}},"findLastKey":{"name":"findLastKey","label":"findLastKey()","id":"findLastKey()","group":"Search for value","doc":{"synopsis":"<p>Returns the last key for which the <code><span class=\"t param\">predicate</span></code> returns true.</p>\n","description":"<p>Note: <code><span class=\"t param\">predicate</span></code> will be called for each entry in reverse.</p>\n","notes":[]},"signatures":[{"line":5215,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$7"},{"name":"key","type":"$6"},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":13,"types":["$6",{"k":4}]}}],"url":"/docs/v5.1.1/Seq.Indexed#findLastKey()","inherited":{"interface":"Collection","label":"findLastKey()","url":"/docs/v5.1.1/Collection#findLastKey()"}},"keyOf":{"name":"keyOf","label":"keyOf()","id":"keyOf()","group":"Search for value","doc":{"synopsis":"<p>Returns the key associated with the search value, or undefined.</p>\n","description":"","notes":[]},"signatures":[{"line":5223,"params":[{"name":"searchValue","type":"$7"}],"type":{"k":13,"types":["$6",{"k":4}]}}],"url":"/docs/v5.1.1/Seq.Indexed#keyOf()","inherited":{"interface":"Collection","label":"keyOf()","url":"/docs/v5.1.1/Collection#keyOf()"}},"lastKeyOf":{"name":"lastKeyOf","label":"lastKeyOf()","id":"lastKeyOf()","group":"Search for value","doc":{"synopsis":"<p>Returns the last key associated with the search value, or undefined.</p>\n","description":"","notes":[]},"signatures":[{"line":5228,"params":[{"name":"searchValue","type":"$7"}],"type":{"k":13,"types":["$6",{"k":4}]}}],"url":"/docs/v5.1.1/Seq.Indexed#lastKeyOf()","inherited":{"interface":"Collection","label":"lastKeyOf()","url":"/docs/v5.1.1/Collection#lastKeyOf()"}},"max":{"name":"max","label":"max()","id":"max()","group":"Search for value","doc":{"synopsis":"<p>Returns the maximum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n","description":"<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/v5.1.1/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\">></span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/v5.1.1/List#max()\">max</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\">></span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n","notes":[]},"signatures":[{"line":5245,"params":[{"name":"comparator","type":{"k":12,"name":"Comparator","args":["$7"]},"optional":true}],"type":{"k":13,"types":["$7",{"k":4}]}}],"url":"/docs/v5.1.1/Seq.Indexed#max()","inherited":{"interface":"Collection","label":"max()","url":"/docs/v5.1.1/Collection#max()"}},"maxBy":{"name":"maxBy","label":"maxBy()","id":"maxBy()","group":"Search for value","doc":{"synopsis":"<p>Like <code><a href=\"/docs/v5.1.1/List#max()\">max</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n","description":"$15","notes":[]},"signatures":[{"line":5262,"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":10,"params":[{"name":"value","type":"$7"},{"name":"key","type":"$6"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"C"}}},{"name":"comparator","type":{"k":12,"name":"Comparator","args":[{"k":11,"param":"C"}]},"optional":true}],"type":{"k":13,"types":["$7",{"k":4}]}}],"url":"/docs/v5.1.1/Seq.Indexed#maxBy()","inherited":{"interface":"Collection","label":"maxBy()","url":"/docs/v5.1.1/Collection#maxBy()"}},"min":{"name":"min","label":"min()","id":"min()","group":"Search for value","doc":{"synopsis":"<p>Returns the minimum value in this collection. If any values are\ncomparatively equivalent, the first one found will be returned.</p>\n","description":"<p>The <code><span class=\"t param\">comparator</span></code> is used in the same way as <code><a href=\"/docs/v5.1.1/Collection#sort()\">Collection#sort</a></code>. If it is not\nprovided, the default comparator is <code><span class=\"token operator\">&lt;</span></code>.</p>\n<p>When two values are considered equivalent, the first encountered will be\nreturned. Otherwise, <code><a href=\"/docs/v5.1.1/List#min()\">min</a></code> will operate independent of the order of input\nas long as the comparator is commutative. The default comparator <code><span class=\"token operator\">&lt;</span></code> is\ncommutative <em>only</em> when types do not differ.</p>\n<p>If <code><span class=\"t param\">comparator</span></code> returns 0 and either value is NaN, undefined, or null,\nthat value will be returned.</p>\n","notes":[]},"signatures":[{"line":5282,"params":[{"name":"comparator","type":{"k":12,"name":"Comparator","args":["$7"]},"optional":true}],"type":{"k":13,"types":["$7",{"k":4}]}}],"url":"/docs/v5.1.1/Seq.Indexed#min()","inherited":{"interface":"Collection","label":"min()","url":"/docs/v5.1.1/Collection#min()"}},"minBy":{"name":"minBy","label":"minBy()","id":"minBy()","group":"Search for value","doc":{"synopsis":"<p>Like <code><a href=\"/docs/v5.1.1/List#min()\">min</a></code>, but also accepts a <code><span class=\"t param\">comparatorValueMapper</span></code> which allows for\ncomparing by more sophisticated means:</p>\n","description":"$16","notes":[]},"signatures":[{"line":5299,"typeParams":["C"],"params":[{"name":"comparatorValueMapper","type":{"k":10,"params":[{"name":"value","type":"$7"},{"name":"key","type":"$6"},{"name":"iter","type":{"k":3}}],"type":{"k":11,"param":"C"}}},{"name":"comparator","type":{"k":12,"name":"Comparator","args":[{"k":11,"param":"C"}]},"optional":true}],"type":{"k":13,"types":["$7",{"k":4}]}}],"url":"/docs/v5.1.1/Seq.Indexed#minBy()","inherited":{"interface":"Collection","label":"minBy()","url":"/docs/v5.1.1/Collection#minBy()"}},"isSubset":{"name":"isSubset","label":"isSubset()","id":"isSubset()","group":"Comparison","doc":{"synopsis":"<p>True if <code><span class=\"t param\">iter</span></code> includes every value in this Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":5309,"params":[{"name":"iter","type":{"k":12,"name":"Iterable","args":["$7"]}}],"type":{"k":5}}],"url":"/docs/v5.1.1/Seq.Indexed#isSubset()","inherited":{"interface":"Collection","label":"isSubset()","url":"/docs/v5.1.1/Collection#isSubset()"}},"isSuperset":{"name":"isSuperset","label":"isSuperset()","id":"isSuperset()","group":"Comparison","doc":{"synopsis":"<p>True if this Collection includes every value in <code><span class=\"t param\">iter</span></code>.</p>\n","description":"","notes":[]},"signatures":[{"line":5314,"params":[{"name":"iter","type":{"k":12,"name":"Iterable","args":["$7"]}}],"type":{"k":5}}],"url":"/docs/v5.1.1/Seq.Indexed#isSuperset()","inherited":{"interface":"Collection","label":"isSuperset()","url":"/docs/v5.1.1/Collection#isSuperset()"}},"fromEntrySeq":{"name":"fromEntrySeq","label":"fromEntrySeq()","id":"fromEntrySeq()","group":"Conversion to Seq","doc":{"synopsis":"<p>If this is a collection of [key, value] entry tuples, it will return a\nSeq.Keyed of those entries.</p>\n","description":"","notes":[]},"signatures":[{"line":3981,"type":{"k":12,"name":"Seq.Keyed","args":[{"k":2},{"k":2}],"url":"/docs/v5.1.1/Seq.Keyed"}}],"url":"/docs/v5.1.1/Seq.Indexed#fromEntrySeq()","inherited":{"interface":"Collection.Indexed","label":"fromEntrySeq()","url":"/docs/v5.1.1/Collection.Indexed#fromEntrySeq()"}},"interpose":{"name":"interpose","label":"interpose()","id":"interpose()","group":"Combination","doc":{"synopsis":"<p>Returns a Collection of the same type with <code><span class=\"t param\">separator</span></code> between each item\nin this Collection.</p>\n","description":"","notes":[]},"signatures":[{"line":3989,"params":[{"name":"separator","type":{"k":11,"param":"T"}}],"type":{"k":3}}],"url":"/docs/v5.1.1/Seq.Indexed#interpose()","inherited":{"interface":"Collection.Indexed","label":"interpose()","url":"/docs/v5.1.1/Collection.Indexed#interpose()"}},"interleave":{"name":"interleave","label":"interleave()","id":"interleave()","group":"Combination","doc":{"synopsis":"<p>Returns a Collection of the same type with the provided <code><span class=\"t param\">collections</span></code>\ninterleaved into this collection.</p>\n","description":"$17","notes":[]},"signatures":[{"line":4025,"params":[{"name":"collections","type":{"k":12,"name":"Array","args":[{"k":12,"name":"Collection","args":[{"k":2},"$18"]}]},"varArgs":true}],"type":{"k":3}}],"url":"/docs/v5.1.1/Seq.Indexed#interleave()","inherited":{"interface":"Collection.Indexed","label":"interleave()","url":"/docs/v5.1.1/Collection.Indexed#interleave()"}},"splice":{"name":"splice","label":"splice()","id":"splice()","group":"Combination","doc":{"synopsis":"<p>Splice returns a new indexed Collection by replacing a region of this\nCollection with new values. If values are not provided, it only skips the\nregion to be removed.</p>\n","description":"$19","notes":[]},"signatures":[{"line":4047,"params":[{"name":"index","type":{"k":6}},{"name":"removeNum","type":{"k":6}},{"name":"values","type":{"k":12,"name":"Array","args":["$18"]},"varArgs":true}],"type":{"k":3}}],"url":"/docs/v5.1.1/Seq.Indexed#splice()","inherited":{"interface":"Collection.Indexed","label":"splice()","url":"/docs/v5.1.1/Collection.Indexed#splice()"}},"indexOf":{"name":"indexOf","label":"indexOf()","id":"indexOf()","group":"Search for value","doc":{"synopsis":"<p>Returns the first index at which a given value can be found in the\nCollection, or -1 if it is not present.</p>\n","description":"","notes":[]},"signatures":[{"line":4129,"params":[{"name":"searchValue","type":"$18"}],"type":{"k":6}}],"url":"/docs/v5.1.1/Seq.Indexed#indexOf()","inherited":{"interface":"Collection.Indexed","label":"indexOf()","url":"/docs/v5.1.1/Collection.Indexed#indexOf()"}},"lastIndexOf":{"name":"lastIndexOf","label":"lastIndexOf()","id":"lastIndexOf()","group":"Search for value","doc":{"synopsis":"<p>Returns the last index at which a given value can be found in the\nCollection, or -1 if it is not present.</p>\n","description":"","notes":[]},"signatures":[{"line":4135,"params":[{"name":"searchValue","type":"$18"}],"type":{"k":6}}],"url":"/docs/v5.1.1/Seq.Indexed#lastIndexOf()","inherited":{"interface":"Collection.Indexed","label":"lastIndexOf()","url":"/docs/v5.1.1/Collection.Indexed#lastIndexOf()"}},"findIndex":{"name":"findIndex","label":"findIndex()","id":"findIndex()","group":"Search for value","doc":{"synopsis":"<p>Returns the first index in the Collection where a value satisfies the\nprovided predicate function. Otherwise -1 is returned.</p>\n","description":"","notes":[]},"signatures":[{"line":4141,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$18"},{"name":"index","type":{"k":6}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":6}}],"url":"/docs/v5.1.1/Seq.Indexed#findIndex()","inherited":{"interface":"Collection.Indexed","label":"findIndex()","url":"/docs/v5.1.1/Collection.Indexed#findIndex()"}},"findLastIndex":{"name":"findLastIndex","label":"findLastIndex()","id":"findLastIndex()","group":"Search for value","doc":{"synopsis":"<p>Returns the last index in the Collection where a value satisfies the\nprovided predicate function. Otherwise -1 is returned.</p>\n","description":"","notes":[]},"signatures":[{"line":4150,"params":[{"name":"predicate","type":{"k":10,"params":[{"name":"value","type":"$18"},{"name":"index","type":{"k":6}},{"name":"iter","type":{"k":3}}],"type":{"k":5}}},{"name":"context","type":{"k":2},"optional":true}],"type":{"k":6}}],"url":"/docs/v5.1.1/Seq.Indexed#findLastIndex()","inherited":{"interface":"Collection.Indexed","label":"findLastIndex()","url":"/docs/v5.1.1/Collection.Indexed#findLastIndex()"}}},"line":3293,"typeParams":["T"],"extends":[{"k":12,"name":"Seq","args":["$6","$7"],"url":"/docs/v5.1.1/Seq"},{"k":12,"name":"Collection.Indexed","args":["$18"],"url":"/docs/v5.1.1/Collection.Indexed"}]},"label":"Seq.Indexed","url":"/docs/v5.1.1/Seq.Indexed"},"sidebarLinks":[{"label":"List","url":"/docs/v5.1.1/List"},{"label":"Map","url":"/docs/v5.1.1/Map"},{"label":"OrderedMap","url":"/docs/v5.1.1/OrderedMap"},{"label":"Set","url":"/docs/v5.1.1/Set"},{"label":"OrderedSet","url":"/docs/v5.1.1/OrderedSet"},{"label":"Stack","url":"/docs/v5.1.1/Stack"},{"label":"Range()","url":"/docs/v5.1.1/Range()"},{"label":"Repeat()","url":"/docs/v5.1.1/Repeat()"},{"label":"Record","url":"/docs/v5.1.1/Record"},{"label":"Record.Factory","url":"/docs/v5.1.1/Record.Factory"},{"label":"Seq","url":"/docs/v5.1.1/Seq"},{"label":"Seq.Keyed","url":"/docs/v5.1.1/Seq.Keyed"},{"label":"Seq.Indexed","url":"/docs/v5.1.1/Seq.Indexed"},{"label":"Seq.Set","url":"/docs/v5.1.1/Seq.Set"},{"label":"Collection","url":"/docs/v5.1.1/Collection"},{"label":"Collection.Keyed","url":"/docs/v5.1.1/Collection.Keyed"},{"label":"Collection.Indexed","url":"/docs/v5.1.1/Collection.Indexed"},{"label":"Collection.Set","url":"/docs/v5.1.1/Collection.Set"},{"label":"ValueObject","url":"/docs/v5.1.1/ValueObject"},{"label":"OrderedCollection","url":"/docs/v5.1.1/OrderedCollection"},{"label":"fromJS()","url":"/docs/v5.1.1/fromJS()"},{"label":"is()","url":"/docs/v5.1.1/is()"},{"label":"hash()","url":"/docs/v5.1.1/hash()"},{"label":"isImmutable()","url":"/docs/v5.1.1/isImmutable()"},{"label":"isCollection()","url":"/docs/v5.1.1/isCollection()"},{"label":"isKeyed()","url":"/docs/v5.1.1/isKeyed()"},{"label":"isIndexed()","url":"/docs/v5.1.1/isIndexed()"},{"label":"isAssociative()","url":"/docs/v5.1.1/isAssociative()"},{"label":"isOrdered()","url":"/docs/v5.1.1/isOrdered()"},{"label":"isValueObject()","url":"/docs/v5.1.1/isValueObject()"},{"label":"isSeq()","url":"/docs/v5.1.1/isSeq()"},{"label":"isList()","url":"/docs/v5.1.1/isList()"},{"label":"isMap()","url":"/docs/v5.1.1/isMap()"},{"label":"isOrderedMap()","url":"/docs/v5.1.1/isOrderedMap()"},{"label":"isStack()","url":"/docs/v5.1.1/isStack()"},{"label":"isSet()","url":"/docs/v5.1.1/isSet()"},{"label":"isOrderedSet()","url":"/docs/v5.1.1/isOrderedSet()"},{"label":"isRecord()","url":"/docs/v5.1.1/isRecord()"},{"label":"get()","url":"/docs/v5.1.1/get()"},{"label":"has()","url":"/docs/v5.1.1/has()"},{"label":"remove()","url":"/docs/v5.1.1/remove()"},{"label":"set()","url":"/docs/v5.1.1/set()"},{"label":"update()","url":"/docs/v5.1.1/update()"},{"label":"getIn()","url":"/docs/v5.1.1/getIn()"},{"label":"hasIn()","url":"/docs/v5.1.1/hasIn()"},{"label":"removeIn()","url":"/docs/v5.1.1/removeIn()"},{"label":"setIn()","url":"/docs/v5.1.1/setIn()"},{"label":"updateIn()","url":"/docs/v5.1.1/updateIn()"},{"label":"merge()","url":"/docs/v5.1.1/merge()"},{"label":"mergeWith()","url":"/docs/v5.1.1/mergeWith()"},{"label":"mergeDeep()","url":"/docs/v5.1.1/mergeDeep()"},{"label":"mergeDeepWith()","url":"/docs/v5.1.1/mergeDeepWith()"}]}],null],null],null]},[null,["$","$L1a",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children","$1b","children","$1c","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L1d",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[null,["$","div",null,{"children":[["$","$L1e",null,{"version":"v5.1.1"}],["$","div",null,{"className":"header","children":["$","div",null,{"className":"miniHeader","children":["$","div",null,{"className":"miniHeaderContents","children":[["$","$L1f",null,{}],["$","$L20",null,{"versions":["v5.1.1","v4.3.7","v3.8.2","latest@main"],"currentVersion":"v5.1.1"}]]}]}]}],["$","div",null,{"className":"pageBody","children":["$","div",null,{"className":"contents","children":["$","$L1a",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children","$1b","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L1d",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]}]}]]}]],null],null]},[null,["$","$L1a",null,{"parallelRouterKey":"children","segmentPath":["children","docs","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L1d",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/58b981fd7780f7a5.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"en","children":["$","body",null,{"children":["$","$L1a",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L1d",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}]}]}]],null],null],["$L21",null]]]]
21:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Seq.Indexed — Immutable.js"}],["$","link","3",{"rel":"icon","href":"/favicon.png"}]]
1:null
